// Code generated by ogen, DO NOT EDIT.

package dip

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *Aktivitaet) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Dokumentart.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dokumentart",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Fundstelle.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fundstelle",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    4,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Vorgangsbezug)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Vorgangsbezug {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vorgangsbezug",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Deskriptor {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deskriptor",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AktivitaetDokumentart) Validate() error {
	switch s {
	case "Drucksache":
		return nil
	case "Plenarprotokoll":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AktivitaetListResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Documents == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Documents)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Documents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "documents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AktivitaetTyp) Validate() error {
	switch s {
	case "Aktivität":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *BadRequestResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s BadRequestResponseCode) Validate() error {
	switch s {
	case 400:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Beschlussfassung) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Abstimmungsart.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "abstimmungsart",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Mehrheit.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mehrheit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s BeschlussfassungAbstimmungsart) Validate() error {
	switch s {
	case "Abstimmung durch Aufruf der Länder":
		return nil
	case "Geheime Wahl":
		return nil
	case "Hammelsprung":
		return nil
	case "Namentliche Abstimmung":
		return nil
	case "Verhältniswahl":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BeschlussfassungMehrheit) Validate() error {
	switch s {
	case "Absolute Mehrheit":
		return nil
	case "Zweidrittelmehrheit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s Bundesland) Validate() error {
	switch s {
	case "Baden-Württemberg":
		return nil
	case "Bayern":
		return nil
	case "Berlin":
		return nil
	case "Brandenburg":
		return nil
	case "Bremen":
		return nil
	case "Hamburg":
		return nil
	case "Hessen":
		return nil
	case "Mecklenburg-Vorpommern":
		return nil
	case "Niedersachsen":
		return nil
	case "Nordrhein-Westfalen":
		return nil
	case "Rheinland-Pfalz":
		return nil
	case "Saarland":
		return nil
	case "Sachsen":
		return nil
	case "Sachsen-Anhalt":
		return nil
	case "Schleswig-Holstein":
		return nil
	case "Thüringen":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Deskriptor) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DeskriptorTyp) Validate() error {
	switch s {
	case "Freier Deskriptor":
		return nil
	case "Geograph. Begriffe":
		return nil
	case "Institutionen":
		return nil
	case "Personen":
		return nil
	case "Rechtsmaterialien":
		return nil
	case "Sachbegriffe":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Drucksache) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Dokumentart.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dokumentart",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Herausgeber.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "herausgeber",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    4,
			MaxLengthSet: true,
		}).ValidateLength(len(s.AutorenAnzeige)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.AutorenAnzeige {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "autoren_anzeige",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Fundstelle.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fundstelle",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Urheber {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "urheber",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    4,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Vorgangsbezug)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Vorgangsbezug {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vorgangsbezug",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DrucksacheAutorenAnzeigeItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DrucksacheDokumentart) Validate() error {
	switch s {
	case "Drucksache":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DrucksacheHerausgeber) Validate() error {
	switch s {
	case "BT":
		return nil
	case "BR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *DrucksacheListResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Documents == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Documents)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Documents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "documents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DrucksacheText) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Dokumentart.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dokumentart",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Herausgeber.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "herausgeber",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    4,
			MaxLengthSet: true,
		}).ValidateLength(len(s.AutorenAnzeige)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.AutorenAnzeige {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "autoren_anzeige",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Fundstelle.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fundstelle",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Urheber {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "urheber",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    4,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Vorgangsbezug)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Vorgangsbezug {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vorgangsbezug",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DrucksacheTextAutorenAnzeigeItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DrucksacheTextDokumentart) Validate() error {
	switch s {
	case "Drucksache":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DrucksacheTextHerausgeber) Validate() error {
	switch s {
	case "BT":
		return nil
	case "BR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *DrucksacheTextListResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Documents == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    10,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Documents)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Documents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "documents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DrucksacheTextTyp) Validate() error {
	switch s {
	case "Dokument":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DrucksacheTyp) Validate() error {
	switch s {
	case "Dokument":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Fundstelle) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Dokumentart.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dokumentart",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Herausgeber.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "herausgeber",
			Error: err,
		})
	}
	if err := func() error {
		if s.Urheber == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "urheber",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Anfangsquadrant.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "anfangsquadrant",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Endquadrant.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "endquadrant",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s FundstelleDokumentart) Validate() error {
	switch s {
	case "Drucksache":
		return nil
	case "Plenarprotokoll":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetAktivitaetFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetAktivitaetListFDokumentart) Validate() error {
	switch s {
	case "Drucksache":
		return nil
	case "Plenarprotokoll":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetAktivitaetListFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetDrucksacheFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetDrucksacheListFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetDrucksacheTextFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetDrucksacheTextListFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPersonFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPersonListFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPlenarprotokollFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPlenarprotokollListFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPlenarprotokollTextFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetPlenarprotokollTextListFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVorgangFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVorgangListFDokumentart) Validate() error {
	switch s {
	case "Drucksache":
		return nil
	case "Plenarprotokoll":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVorgangListFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVorgangspositionFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVorgangspositionListFDokumentart) Validate() error {
	switch s {
	case "Drucksache":
		return nil
	case "Plenarprotokoll":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetVorgangspositionListFormat) Validate() error {
	switch s {
	case "json":
		return nil
	case "xml":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *NotFoundResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s NotFoundResponseCode) Validate() error {
	switch s {
	case 404:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Person) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PersonRoles {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "person_roles",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PersonListResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Documents == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Documents)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Documents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "documents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PersonRole) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Bundesland.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bundesland",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Plenarprotokoll) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Dokumentart.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dokumentart",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Herausgeber.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "herausgeber",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Fundstelle.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fundstelle",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    4,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Vorgangsbezug)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Vorgangsbezug {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vorgangsbezug",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlenarprotokollDokumentart) Validate() error {
	switch s {
	case "Plenarprotokoll":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlenarprotokollListResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Documents == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Documents)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Documents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "documents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlenarprotokollText) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Dokumentart.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dokumentart",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Herausgeber.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "herausgeber",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Fundstelle.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fundstelle",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    4,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Vorgangsbezug)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Vorgangsbezug {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vorgangsbezug",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlenarprotokollTextDokumentart) Validate() error {
	switch s {
	case "Plenarprotokoll":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlenarprotokollTextListResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Documents == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    10,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Documents)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Documents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "documents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlenarprotokollTextTyp) Validate() error {
	switch s {
	case "Dokument":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlenarprotokollTyp) Validate() error {
	switch s {
	case "Dokument":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s Quadrant) Validate() error {
	switch s {
	case "A":
		return nil
	case "B":
		return nil
	case "C":
		return nil
	case "D":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UnauthorizedResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Message.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UnauthorizedResponseCode) Validate() error {
	switch s {
	case 401:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UnauthorizedResponseMessage) Validate() error {
	switch s {
	case "An API key is required to access this service. Please refer to https://dip.bundestag.de/über-dip/hilfe/api how to apply for a key. Misuse of this service may lead to blocking your requests.":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Urheber) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rolle.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rolle",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UrheberRolle) Validate() error {
	switch s {
	case "B":
		return nil
	case "U":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Vorgang) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Deskriptor {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deskriptor",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.VorgangVerlinkung {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vorgang_verlinkung",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *VorgangDeskriptor) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s VorgangDeskriptorTyp) Validate() error {
	switch s {
	case "Freier Deskriptor":
		return nil
	case "Geograph. Begriffe":
		return nil
	case "Institutionen":
		return nil
	case "Personen":
		return nil
	case "Rechtsmaterialien":
		return nil
	case "Sachbegriffe":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *VorgangListResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Documents == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Documents)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Documents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "documents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s VorgangTyp) Validate() error {
	switch s {
	case "Vorgang":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *VorgangVerlinkung) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Vorgangsbezug) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Vorgangsposition) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Zuordnung.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "zuordnung",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Typ.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typ",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Dokumentart.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dokumentart",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.VorgangID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vorgang_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Fundstelle.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fundstelle",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Urheber {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "urheber",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    4,
			MaxLengthSet: true,
		}).ValidateLength(len(s.AktivitaetAnzeige)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aktivitaet_anzeige",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Beschlussfassung {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "beschlussfassung",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Mitberaten {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mitberaten",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s VorgangspositionDokumentart) Validate() error {
	switch s {
	case "Drucksache":
		return nil
	case "Plenarprotokoll":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *VorgangspositionListResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Documents == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    0,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Documents)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Documents {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "documents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s VorgangspositionTyp) Validate() error {
	switch s {
	case "Vorgangsposition":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Vorgangspositionbezug) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\d+$"],
		}).Validate(string(s.ID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s Zuordnung) Validate() error {
	switch s {
	case "BT":
		return nil
	case "BR":
		return nil
	case "BV":
		return nil
	case "EK":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
