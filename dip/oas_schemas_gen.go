// Code generated by ogen, DO NOT EDIT.

package dip

import (
	"io"
	"time"

	"github.com/go-faster/errors"
)

// Liefert Metadaten zu einer Aktivität.
// Ref: #/components/schemas/Aktivitaet
type Aktivitaet struct {
	ID             string                `json:"id"`
	Aktivitaetsart string                `json:"aktivitaetsart"`
	Typ            AktivitaetTyp         `json:"typ"`
	Dokumentart    AktivitaetDokumentart `json:"dokumentart"`
	Wahlperiode    int32                 `json:"wahlperiode"`
	Datum          time.Time             `json:"datum"`
	// Letzte Aktualisierung der Entität oder des zugehörigen Dokuments.
	Aktualisiert time.Time  `json:"aktualisiert"`
	Titel        string     `json:"titel"`
	Fundstelle   Fundstelle `json:"fundstelle"`
	// Zusammenfassung der ersten 4 zugehörigen Vorgänge.
	Vorgangsbezug []Vorgangspositionbezug `json:"vorgangsbezug"`
	// Gesamtzahl der zugehörigen Vorgänge.
	VorgangsbezugAnzahl int32        `json:"vorgangsbezug_anzahl"`
	Deskriptor          []Deskriptor `json:"deskriptor"`
	Abstract            OptString    `json:"abstract"`
}

// GetID returns the value of ID.
func (s *Aktivitaet) GetID() string {
	return s.ID
}

// GetAktivitaetsart returns the value of Aktivitaetsart.
func (s *Aktivitaet) GetAktivitaetsart() string {
	return s.Aktivitaetsart
}

// GetTyp returns the value of Typ.
func (s *Aktivitaet) GetTyp() AktivitaetTyp {
	return s.Typ
}

// GetDokumentart returns the value of Dokumentart.
func (s *Aktivitaet) GetDokumentart() AktivitaetDokumentart {
	return s.Dokumentart
}

// GetWahlperiode returns the value of Wahlperiode.
func (s *Aktivitaet) GetWahlperiode() int32 {
	return s.Wahlperiode
}

// GetDatum returns the value of Datum.
func (s *Aktivitaet) GetDatum() time.Time {
	return s.Datum
}

// GetAktualisiert returns the value of Aktualisiert.
func (s *Aktivitaet) GetAktualisiert() time.Time {
	return s.Aktualisiert
}

// GetTitel returns the value of Titel.
func (s *Aktivitaet) GetTitel() string {
	return s.Titel
}

// GetFundstelle returns the value of Fundstelle.
func (s *Aktivitaet) GetFundstelle() Fundstelle {
	return s.Fundstelle
}

// GetVorgangsbezug returns the value of Vorgangsbezug.
func (s *Aktivitaet) GetVorgangsbezug() []Vorgangspositionbezug {
	return s.Vorgangsbezug
}

// GetVorgangsbezugAnzahl returns the value of VorgangsbezugAnzahl.
func (s *Aktivitaet) GetVorgangsbezugAnzahl() int32 {
	return s.VorgangsbezugAnzahl
}

// GetDeskriptor returns the value of Deskriptor.
func (s *Aktivitaet) GetDeskriptor() []Deskriptor {
	return s.Deskriptor
}

// GetAbstract returns the value of Abstract.
func (s *Aktivitaet) GetAbstract() OptString {
	return s.Abstract
}

// SetID sets the value of ID.
func (s *Aktivitaet) SetID(val string) {
	s.ID = val
}

// SetAktivitaetsart sets the value of Aktivitaetsart.
func (s *Aktivitaet) SetAktivitaetsart(val string) {
	s.Aktivitaetsart = val
}

// SetTyp sets the value of Typ.
func (s *Aktivitaet) SetTyp(val AktivitaetTyp) {
	s.Typ = val
}

// SetDokumentart sets the value of Dokumentart.
func (s *Aktivitaet) SetDokumentart(val AktivitaetDokumentart) {
	s.Dokumentart = val
}

// SetWahlperiode sets the value of Wahlperiode.
func (s *Aktivitaet) SetWahlperiode(val int32) {
	s.Wahlperiode = val
}

// SetDatum sets the value of Datum.
func (s *Aktivitaet) SetDatum(val time.Time) {
	s.Datum = val
}

// SetAktualisiert sets the value of Aktualisiert.
func (s *Aktivitaet) SetAktualisiert(val time.Time) {
	s.Aktualisiert = val
}

// SetTitel sets the value of Titel.
func (s *Aktivitaet) SetTitel(val string) {
	s.Titel = val
}

// SetFundstelle sets the value of Fundstelle.
func (s *Aktivitaet) SetFundstelle(val Fundstelle) {
	s.Fundstelle = val
}

// SetVorgangsbezug sets the value of Vorgangsbezug.
func (s *Aktivitaet) SetVorgangsbezug(val []Vorgangspositionbezug) {
	s.Vorgangsbezug = val
}

// SetVorgangsbezugAnzahl sets the value of VorgangsbezugAnzahl.
func (s *Aktivitaet) SetVorgangsbezugAnzahl(val int32) {
	s.VorgangsbezugAnzahl = val
}

// SetDeskriptor sets the value of Deskriptor.
func (s *Aktivitaet) SetDeskriptor(val []Deskriptor) {
	s.Deskriptor = val
}

// SetAbstract sets the value of Abstract.
func (s *Aktivitaet) SetAbstract(val OptString) {
	s.Abstract = val
}

func (*Aktivitaet) getAktivitaetRes() {}

// Liefert im Vorgangsablauf die beim Vorgangsschritt zur Anzeige vorgesehenen Aktivitäten, z. B.
// eine Rede eines MdB beim Vorgangsschritt 1. Beratung in einem Gesetzgebungsvorgang.
// Ref: #/components/schemas/AktivitaetAnzeige
type AktivitaetAnzeige struct {
	Aktivitaetsart string    `json:"aktivitaetsart"`
	Titel          string    `json:"titel"`
	PdfURL         OptString `json:"pdf_url"`
	Seite          OptString `json:"seite"`
}

// GetAktivitaetsart returns the value of Aktivitaetsart.
func (s *AktivitaetAnzeige) GetAktivitaetsart() string {
	return s.Aktivitaetsart
}

// GetTitel returns the value of Titel.
func (s *AktivitaetAnzeige) GetTitel() string {
	return s.Titel
}

// GetPdfURL returns the value of PdfURL.
func (s *AktivitaetAnzeige) GetPdfURL() OptString {
	return s.PdfURL
}

// GetSeite returns the value of Seite.
func (s *AktivitaetAnzeige) GetSeite() OptString {
	return s.Seite
}

// SetAktivitaetsart sets the value of Aktivitaetsart.
func (s *AktivitaetAnzeige) SetAktivitaetsart(val string) {
	s.Aktivitaetsart = val
}

// SetTitel sets the value of Titel.
func (s *AktivitaetAnzeige) SetTitel(val string) {
	s.Titel = val
}

// SetPdfURL sets the value of PdfURL.
func (s *AktivitaetAnzeige) SetPdfURL(val OptString) {
	s.PdfURL = val
}

// SetSeite sets the value of Seite.
func (s *AktivitaetAnzeige) SetSeite(val OptString) {
	s.Seite = val
}

type AktivitaetDokumentart string

const (
	AktivitaetDokumentartDrucksache      AktivitaetDokumentart = "Drucksache"
	AktivitaetDokumentartPlenarprotokoll AktivitaetDokumentart = "Plenarprotokoll"
)

// AllValues returns all AktivitaetDokumentart values.
func (AktivitaetDokumentart) AllValues() []AktivitaetDokumentart {
	return []AktivitaetDokumentart{
		AktivitaetDokumentartDrucksache,
		AktivitaetDokumentartPlenarprotokoll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AktivitaetDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case AktivitaetDokumentartDrucksache:
		return []byte(s), nil
	case AktivitaetDokumentartPlenarprotokoll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AktivitaetDokumentart) UnmarshalText(data []byte) error {
	switch AktivitaetDokumentart(data) {
	case AktivitaetDokumentartDrucksache:
		*s = AktivitaetDokumentartDrucksache
		return nil
	case AktivitaetDokumentartPlenarprotokoll:
		*s = AktivitaetDokumentartPlenarprotokoll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/AktivitaetListResponse
type AktivitaetListResponse struct {
	NumFound  int32        `json:"numFound"`
	Cursor    string       `json:"cursor"`
	Documents []Aktivitaet `json:"documents"`
}

// GetNumFound returns the value of NumFound.
func (s *AktivitaetListResponse) GetNumFound() int32 {
	return s.NumFound
}

// GetCursor returns the value of Cursor.
func (s *AktivitaetListResponse) GetCursor() string {
	return s.Cursor
}

// GetDocuments returns the value of Documents.
func (s *AktivitaetListResponse) GetDocuments() []Aktivitaet {
	return s.Documents
}

// SetNumFound sets the value of NumFound.
func (s *AktivitaetListResponse) SetNumFound(val int32) {
	s.NumFound = val
}

// SetCursor sets the value of Cursor.
func (s *AktivitaetListResponse) SetCursor(val string) {
	s.Cursor = val
}

// SetDocuments sets the value of Documents.
func (s *AktivitaetListResponse) SetDocuments(val []Aktivitaet) {
	s.Documents = val
}

func (*AktivitaetListResponse) getAktivitaetListRes() {}

type AktivitaetTyp string

const (
	AktivitaetTypAktivitT AktivitaetTyp = "Aktivität"
)

// AllValues returns all AktivitaetTyp values.
func (AktivitaetTyp) AllValues() []AktivitaetTyp {
	return []AktivitaetTyp{
		AktivitaetTypAktivitT,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AktivitaetTyp) MarshalText() ([]byte, error) {
	switch s {
	case AktivitaetTypAktivitT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AktivitaetTyp) UnmarshalText(data []byte) error {
	switch AktivitaetTyp(data) {
	case AktivitaetTypAktivitT:
		*s = AktivitaetTypAktivitT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ApiKeyHeader struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyHeader) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyHeader) SetAPIKey(val string) {
	s.APIKey = val
}

type ApiKeyQuery struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyQuery) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyQuery) SetAPIKey(val string) {
	s.APIKey = val
}

type BadRequestResponse struct {
	Code    BadRequestResponseCode `json:"code"`
	Message string                 `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestResponse) GetCode() BadRequestResponseCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestResponse) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestResponse) SetCode(val BadRequestResponseCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestResponse) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestResponse) getAktivitaetListRes()          {}
func (*BadRequestResponse) getDrucksacheListRes()          {}
func (*BadRequestResponse) getDrucksacheTextListRes()      {}
func (*BadRequestResponse) getPersonListRes()              {}
func (*BadRequestResponse) getPlenarprotokollListRes()     {}
func (*BadRequestResponse) getPlenarprotokollTextListRes() {}
func (*BadRequestResponse) getVorgangListRes()             {}
func (*BadRequestResponse) getVorgangspositionListRes()    {}

type BadRequestResponseCode int

const (
	BadRequestResponseCode400 BadRequestResponseCode = 400
)

// AllValues returns all BadRequestResponseCode values.
func (BadRequestResponseCode) AllValues() []BadRequestResponseCode {
	return []BadRequestResponseCode{
		BadRequestResponseCode400,
	}
}

// Liefert die Beschlussfassung (z. B. Annahme, Ablehnung, Kenntnisnahme) zu einer Drucksache mit
// Fundstelle im Plenarprotokoll sowie Angaben zu ggf. erforderlichen qualifizierten Mehrheiten
// (`mehrheit`) bzw. der besonderen Abstimmungsverfahren (`abstimmungsart`).
// Ref: #/components/schemas/Beschlussfassung
type Beschlussfassung struct {
	Beschlusstenor           string                            `json:"beschlusstenor"`
	Seite                    OptString                         `json:"seite"`
	Abstimmungsart           OptBeschlussfassungAbstimmungsart `json:"abstimmungsart"`
	AbstimmErgebnisBemerkung OptString                         `json:"abstimm_ergebnis_bemerkung"`
	Grundlage                OptString                         `json:"grundlage"`
	Dokumentnummer           OptString                         `json:"dokumentnummer"`
	Mehrheit                 OptBeschlussfassungMehrheit       `json:"mehrheit"`
}

// GetBeschlusstenor returns the value of Beschlusstenor.
func (s *Beschlussfassung) GetBeschlusstenor() string {
	return s.Beschlusstenor
}

// GetSeite returns the value of Seite.
func (s *Beschlussfassung) GetSeite() OptString {
	return s.Seite
}

// GetAbstimmungsart returns the value of Abstimmungsart.
func (s *Beschlussfassung) GetAbstimmungsart() OptBeschlussfassungAbstimmungsart {
	return s.Abstimmungsart
}

// GetAbstimmErgebnisBemerkung returns the value of AbstimmErgebnisBemerkung.
func (s *Beschlussfassung) GetAbstimmErgebnisBemerkung() OptString {
	return s.AbstimmErgebnisBemerkung
}

// GetGrundlage returns the value of Grundlage.
func (s *Beschlussfassung) GetGrundlage() OptString {
	return s.Grundlage
}

// GetDokumentnummer returns the value of Dokumentnummer.
func (s *Beschlussfassung) GetDokumentnummer() OptString {
	return s.Dokumentnummer
}

// GetMehrheit returns the value of Mehrheit.
func (s *Beschlussfassung) GetMehrheit() OptBeschlussfassungMehrheit {
	return s.Mehrheit
}

// SetBeschlusstenor sets the value of Beschlusstenor.
func (s *Beschlussfassung) SetBeschlusstenor(val string) {
	s.Beschlusstenor = val
}

// SetSeite sets the value of Seite.
func (s *Beschlussfassung) SetSeite(val OptString) {
	s.Seite = val
}

// SetAbstimmungsart sets the value of Abstimmungsart.
func (s *Beschlussfassung) SetAbstimmungsart(val OptBeschlussfassungAbstimmungsart) {
	s.Abstimmungsart = val
}

// SetAbstimmErgebnisBemerkung sets the value of AbstimmErgebnisBemerkung.
func (s *Beschlussfassung) SetAbstimmErgebnisBemerkung(val OptString) {
	s.AbstimmErgebnisBemerkung = val
}

// SetGrundlage sets the value of Grundlage.
func (s *Beschlussfassung) SetGrundlage(val OptString) {
	s.Grundlage = val
}

// SetDokumentnummer sets the value of Dokumentnummer.
func (s *Beschlussfassung) SetDokumentnummer(val OptString) {
	s.Dokumentnummer = val
}

// SetMehrheit sets the value of Mehrheit.
func (s *Beschlussfassung) SetMehrheit(val OptBeschlussfassungMehrheit) {
	s.Mehrheit = val
}

type BeschlussfassungAbstimmungsart string

const (
	BeschlussfassungAbstimmungsartAbstimmungDurchAufrufDerLNder BeschlussfassungAbstimmungsart = "Abstimmung durch Aufruf der Länder"
	BeschlussfassungAbstimmungsartGeheimeWahl                   BeschlussfassungAbstimmungsart = "Geheime Wahl"
	BeschlussfassungAbstimmungsartHammelsprung                  BeschlussfassungAbstimmungsart = "Hammelsprung"
	BeschlussfassungAbstimmungsartNamentlicheAbstimmung         BeschlussfassungAbstimmungsart = "Namentliche Abstimmung"
	BeschlussfassungAbstimmungsartVerhLtniswahl                 BeschlussfassungAbstimmungsart = "Verhältniswahl"
)

// AllValues returns all BeschlussfassungAbstimmungsart values.
func (BeschlussfassungAbstimmungsart) AllValues() []BeschlussfassungAbstimmungsart {
	return []BeschlussfassungAbstimmungsart{
		BeschlussfassungAbstimmungsartAbstimmungDurchAufrufDerLNder,
		BeschlussfassungAbstimmungsartGeheimeWahl,
		BeschlussfassungAbstimmungsartHammelsprung,
		BeschlussfassungAbstimmungsartNamentlicheAbstimmung,
		BeschlussfassungAbstimmungsartVerhLtniswahl,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BeschlussfassungAbstimmungsart) MarshalText() ([]byte, error) {
	switch s {
	case BeschlussfassungAbstimmungsartAbstimmungDurchAufrufDerLNder:
		return []byte(s), nil
	case BeschlussfassungAbstimmungsartGeheimeWahl:
		return []byte(s), nil
	case BeschlussfassungAbstimmungsartHammelsprung:
		return []byte(s), nil
	case BeschlussfassungAbstimmungsartNamentlicheAbstimmung:
		return []byte(s), nil
	case BeschlussfassungAbstimmungsartVerhLtniswahl:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BeschlussfassungAbstimmungsart) UnmarshalText(data []byte) error {
	switch BeschlussfassungAbstimmungsart(data) {
	case BeschlussfassungAbstimmungsartAbstimmungDurchAufrufDerLNder:
		*s = BeschlussfassungAbstimmungsartAbstimmungDurchAufrufDerLNder
		return nil
	case BeschlussfassungAbstimmungsartGeheimeWahl:
		*s = BeschlussfassungAbstimmungsartGeheimeWahl
		return nil
	case BeschlussfassungAbstimmungsartHammelsprung:
		*s = BeschlussfassungAbstimmungsartHammelsprung
		return nil
	case BeschlussfassungAbstimmungsartNamentlicheAbstimmung:
		*s = BeschlussfassungAbstimmungsartNamentlicheAbstimmung
		return nil
	case BeschlussfassungAbstimmungsartVerhLtniswahl:
		*s = BeschlussfassungAbstimmungsartVerhLtniswahl
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BeschlussfassungMehrheit string

const (
	BeschlussfassungMehrheitAbsoluteMehrheit    BeschlussfassungMehrheit = "Absolute Mehrheit"
	BeschlussfassungMehrheitZweidrittelmehrheit BeschlussfassungMehrheit = "Zweidrittelmehrheit"
)

// AllValues returns all BeschlussfassungMehrheit values.
func (BeschlussfassungMehrheit) AllValues() []BeschlussfassungMehrheit {
	return []BeschlussfassungMehrheit{
		BeschlussfassungMehrheitAbsoluteMehrheit,
		BeschlussfassungMehrheitZweidrittelmehrheit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BeschlussfassungMehrheit) MarshalText() ([]byte, error) {
	switch s {
	case BeschlussfassungMehrheitAbsoluteMehrheit:
		return []byte(s), nil
	case BeschlussfassungMehrheitZweidrittelmehrheit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BeschlussfassungMehrheit) UnmarshalText(data []byte) error {
	switch BeschlussfassungMehrheit(data) {
	case BeschlussfassungMehrheitAbsoluteMehrheit:
		*s = BeschlussfassungMehrheitAbsoluteMehrheit
		return nil
	case BeschlussfassungMehrheitZweidrittelmehrheit:
		*s = BeschlussfassungMehrheitZweidrittelmehrheit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Das Bundesland wird bei persönlichen Urhebern verwendet, die Mitglieder des Bundesrates sind, z.
// B. „Reinhold Hilbers, MdBR (Finanzminister), Niedersachsen“.
// Ref: #/components/schemas/Bundesland
type Bundesland string

const (
	BundeslandBadenWRttemberg       Bundesland = "Baden-Württemberg"
	BundeslandBayern                Bundesland = "Bayern"
	BundeslandBerlin                Bundesland = "Berlin"
	BundeslandBrandenburg           Bundesland = "Brandenburg"
	BundeslandBremen                Bundesland = "Bremen"
	BundeslandHamburg               Bundesland = "Hamburg"
	BundeslandHessen                Bundesland = "Hessen"
	BundeslandMecklenburgVorpommern Bundesland = "Mecklenburg-Vorpommern"
	BundeslandNiedersachsen         Bundesland = "Niedersachsen"
	BundeslandNordrheinWestfalen    Bundesland = "Nordrhein-Westfalen"
	BundeslandRheinlandPfalz        Bundesland = "Rheinland-Pfalz"
	BundeslandSaarland              Bundesland = "Saarland"
	BundeslandSachsen               Bundesland = "Sachsen"
	BundeslandSachsenAnhalt         Bundesland = "Sachsen-Anhalt"
	BundeslandSchleswigHolstein     Bundesland = "Schleswig-Holstein"
	BundeslandThRingen              Bundesland = "Thüringen"
)

// AllValues returns all Bundesland values.
func (Bundesland) AllValues() []Bundesland {
	return []Bundesland{
		BundeslandBadenWRttemberg,
		BundeslandBayern,
		BundeslandBerlin,
		BundeslandBrandenburg,
		BundeslandBremen,
		BundeslandHamburg,
		BundeslandHessen,
		BundeslandMecklenburgVorpommern,
		BundeslandNiedersachsen,
		BundeslandNordrheinWestfalen,
		BundeslandRheinlandPfalz,
		BundeslandSaarland,
		BundeslandSachsen,
		BundeslandSachsenAnhalt,
		BundeslandSchleswigHolstein,
		BundeslandThRingen,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Bundesland) MarshalText() ([]byte, error) {
	switch s {
	case BundeslandBadenWRttemberg:
		return []byte(s), nil
	case BundeslandBayern:
		return []byte(s), nil
	case BundeslandBerlin:
		return []byte(s), nil
	case BundeslandBrandenburg:
		return []byte(s), nil
	case BundeslandBremen:
		return []byte(s), nil
	case BundeslandHamburg:
		return []byte(s), nil
	case BundeslandHessen:
		return []byte(s), nil
	case BundeslandMecklenburgVorpommern:
		return []byte(s), nil
	case BundeslandNiedersachsen:
		return []byte(s), nil
	case BundeslandNordrheinWestfalen:
		return []byte(s), nil
	case BundeslandRheinlandPfalz:
		return []byte(s), nil
	case BundeslandSaarland:
		return []byte(s), nil
	case BundeslandSachsen:
		return []byte(s), nil
	case BundeslandSachsenAnhalt:
		return []byte(s), nil
	case BundeslandSchleswigHolstein:
		return []byte(s), nil
	case BundeslandThRingen:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Bundesland) UnmarshalText(data []byte) error {
	switch Bundesland(data) {
	case BundeslandBadenWRttemberg:
		*s = BundeslandBadenWRttemberg
		return nil
	case BundeslandBayern:
		*s = BundeslandBayern
		return nil
	case BundeslandBerlin:
		*s = BundeslandBerlin
		return nil
	case BundeslandBrandenburg:
		*s = BundeslandBrandenburg
		return nil
	case BundeslandBremen:
		*s = BundeslandBremen
		return nil
	case BundeslandHamburg:
		*s = BundeslandHamburg
		return nil
	case BundeslandHessen:
		*s = BundeslandHessen
		return nil
	case BundeslandMecklenburgVorpommern:
		*s = BundeslandMecklenburgVorpommern
		return nil
	case BundeslandNiedersachsen:
		*s = BundeslandNiedersachsen
		return nil
	case BundeslandNordrheinWestfalen:
		*s = BundeslandNordrheinWestfalen
		return nil
	case BundeslandRheinlandPfalz:
		*s = BundeslandRheinlandPfalz
		return nil
	case BundeslandSaarland:
		*s = BundeslandSaarland
		return nil
	case BundeslandSachsen:
		*s = BundeslandSachsen
		return nil
	case BundeslandSachsenAnhalt:
		*s = BundeslandSachsenAnhalt
		return nil
	case BundeslandSchleswigHolstein:
		*s = BundeslandSchleswigHolstein
		return nil
	case BundeslandThRingen:
		*s = BundeslandThRingen
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Datum time.Time

// Liefert die mit einer Aktivität zu deren inhaltlichen Beschreibung verknüpften Schlagwörter.
// Die Schlagwörter (Deskriptoren) entstammen dem kontrollierten Vokabular des Parlamentsthesaurus
// ANTHES/PARTHES und stehen in thematischer Beziehung zueinander.
// Siehe auch: VorgangDeskriptor.
// Ref: #/components/schemas/Deskriptor
type Deskriptor struct {
	Name string        `json:"name"`
	Typ  DeskriptorTyp `json:"typ"`
}

// GetName returns the value of Name.
func (s *Deskriptor) GetName() string {
	return s.Name
}

// GetTyp returns the value of Typ.
func (s *Deskriptor) GetTyp() DeskriptorTyp {
	return s.Typ
}

// SetName sets the value of Name.
func (s *Deskriptor) SetName(val string) {
	s.Name = val
}

// SetTyp sets the value of Typ.
func (s *Deskriptor) SetTyp(val DeskriptorTyp) {
	s.Typ = val
}

type DeskriptorTyp string

const (
	DeskriptorTypFreierDeskriptor  DeskriptorTyp = "Freier Deskriptor"
	DeskriptorTypGeographBegriffe  DeskriptorTyp = "Geograph. Begriffe"
	DeskriptorTypInstitutionen     DeskriptorTyp = "Institutionen"
	DeskriptorTypPersonen          DeskriptorTyp = "Personen"
	DeskriptorTypRechtsmaterialien DeskriptorTyp = "Rechtsmaterialien"
	DeskriptorTypSachbegriffe      DeskriptorTyp = "Sachbegriffe"
)

// AllValues returns all DeskriptorTyp values.
func (DeskriptorTyp) AllValues() []DeskriptorTyp {
	return []DeskriptorTyp{
		DeskriptorTypFreierDeskriptor,
		DeskriptorTypGeographBegriffe,
		DeskriptorTypInstitutionen,
		DeskriptorTypPersonen,
		DeskriptorTypRechtsmaterialien,
		DeskriptorTypSachbegriffe,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeskriptorTyp) MarshalText() ([]byte, error) {
	switch s {
	case DeskriptorTypFreierDeskriptor:
		return []byte(s), nil
	case DeskriptorTypGeographBegriffe:
		return []byte(s), nil
	case DeskriptorTypInstitutionen:
		return []byte(s), nil
	case DeskriptorTypPersonen:
		return []byte(s), nil
	case DeskriptorTypRechtsmaterialien:
		return []byte(s), nil
	case DeskriptorTypSachbegriffe:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeskriptorTyp) UnmarshalText(data []byte) error {
	switch DeskriptorTyp(data) {
	case DeskriptorTypFreierDeskriptor:
		*s = DeskriptorTypFreierDeskriptor
		return nil
	case DeskriptorTypGeographBegriffe:
		*s = DeskriptorTypGeographBegriffe
		return nil
	case DeskriptorTypInstitutionen:
		*s = DeskriptorTypInstitutionen
		return nil
	case DeskriptorTypPersonen:
		*s = DeskriptorTypPersonen
		return nil
	case DeskriptorTypRechtsmaterialien:
		*s = DeskriptorTypRechtsmaterialien
		return nil
	case DeskriptorTypSachbegriffe:
		*s = DeskriptorTypSachbegriffe
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Liefert Metadaten zu einer Drucksache.
// Ref: #/components/schemas/Drucksache
type Drucksache struct {
	ID             string                `json:"id"`
	Typ            DrucksacheTyp         `json:"typ"`
	Dokumentart    DrucksacheDokumentart `json:"dokumentart"`
	Drucksachetyp  string                `json:"drucksachetyp"`
	Dokumentnummer string                `json:"dokumentnummer"`
	Wahlperiode    OptInt32              `json:"wahlperiode"`
	Herausgeber    DrucksacheHerausgeber `json:"herausgeber"`
	Datum          time.Time             `json:"datum"`
	// Letzte Aktualisierung der Entität.
	Aktualisiert time.Time `json:"aktualisiert"`
	Titel        string    `json:"titel"`
	// Zusammenfassung der ersten 4 zur Anzeige markierten Autor:innen.
	AutorenAnzeige []DrucksacheAutorenAnzeigeItem `json:"autoren_anzeige"`
	// Gesamtzahl der Autor:innen.
	AutorenAnzahl int32      `json:"autoren_anzahl"`
	Fundstelle    Fundstelle `json:"fundstelle"`
	// MD5-Prüfsumme der PDF-Datei.
	PdfHash OptString `json:"pdf_hash"`
	Urheber []Urheber `json:"urheber"`
	// Zusammenfassung der ersten 4 zugehörigen Vorgänge.
	Vorgangsbezug []Vorgangsbezug `json:"vorgangsbezug"`
	// Gesamtzahl der zugehörigen Vorgänge.
	VorgangsbezugAnzahl int32     `json:"vorgangsbezug_anzahl"`
	Ressort             []Ressort `json:"ressort"`
	Anlagen             OptString `json:"anlagen"`
}

// GetID returns the value of ID.
func (s *Drucksache) GetID() string {
	return s.ID
}

// GetTyp returns the value of Typ.
func (s *Drucksache) GetTyp() DrucksacheTyp {
	return s.Typ
}

// GetDokumentart returns the value of Dokumentart.
func (s *Drucksache) GetDokumentart() DrucksacheDokumentart {
	return s.Dokumentart
}

// GetDrucksachetyp returns the value of Drucksachetyp.
func (s *Drucksache) GetDrucksachetyp() string {
	return s.Drucksachetyp
}

// GetDokumentnummer returns the value of Dokumentnummer.
func (s *Drucksache) GetDokumentnummer() string {
	return s.Dokumentnummer
}

// GetWahlperiode returns the value of Wahlperiode.
func (s *Drucksache) GetWahlperiode() OptInt32 {
	return s.Wahlperiode
}

// GetHerausgeber returns the value of Herausgeber.
func (s *Drucksache) GetHerausgeber() DrucksacheHerausgeber {
	return s.Herausgeber
}

// GetDatum returns the value of Datum.
func (s *Drucksache) GetDatum() time.Time {
	return s.Datum
}

// GetAktualisiert returns the value of Aktualisiert.
func (s *Drucksache) GetAktualisiert() time.Time {
	return s.Aktualisiert
}

// GetTitel returns the value of Titel.
func (s *Drucksache) GetTitel() string {
	return s.Titel
}

// GetAutorenAnzeige returns the value of AutorenAnzeige.
func (s *Drucksache) GetAutorenAnzeige() []DrucksacheAutorenAnzeigeItem {
	return s.AutorenAnzeige
}

// GetAutorenAnzahl returns the value of AutorenAnzahl.
func (s *Drucksache) GetAutorenAnzahl() int32 {
	return s.AutorenAnzahl
}

// GetFundstelle returns the value of Fundstelle.
func (s *Drucksache) GetFundstelle() Fundstelle {
	return s.Fundstelle
}

// GetPdfHash returns the value of PdfHash.
func (s *Drucksache) GetPdfHash() OptString {
	return s.PdfHash
}

// GetUrheber returns the value of Urheber.
func (s *Drucksache) GetUrheber() []Urheber {
	return s.Urheber
}

// GetVorgangsbezug returns the value of Vorgangsbezug.
func (s *Drucksache) GetVorgangsbezug() []Vorgangsbezug {
	return s.Vorgangsbezug
}

// GetVorgangsbezugAnzahl returns the value of VorgangsbezugAnzahl.
func (s *Drucksache) GetVorgangsbezugAnzahl() int32 {
	return s.VorgangsbezugAnzahl
}

// GetRessort returns the value of Ressort.
func (s *Drucksache) GetRessort() []Ressort {
	return s.Ressort
}

// GetAnlagen returns the value of Anlagen.
func (s *Drucksache) GetAnlagen() OptString {
	return s.Anlagen
}

// SetID sets the value of ID.
func (s *Drucksache) SetID(val string) {
	s.ID = val
}

// SetTyp sets the value of Typ.
func (s *Drucksache) SetTyp(val DrucksacheTyp) {
	s.Typ = val
}

// SetDokumentart sets the value of Dokumentart.
func (s *Drucksache) SetDokumentart(val DrucksacheDokumentart) {
	s.Dokumentart = val
}

// SetDrucksachetyp sets the value of Drucksachetyp.
func (s *Drucksache) SetDrucksachetyp(val string) {
	s.Drucksachetyp = val
}

// SetDokumentnummer sets the value of Dokumentnummer.
func (s *Drucksache) SetDokumentnummer(val string) {
	s.Dokumentnummer = val
}

// SetWahlperiode sets the value of Wahlperiode.
func (s *Drucksache) SetWahlperiode(val OptInt32) {
	s.Wahlperiode = val
}

// SetHerausgeber sets the value of Herausgeber.
func (s *Drucksache) SetHerausgeber(val DrucksacheHerausgeber) {
	s.Herausgeber = val
}

// SetDatum sets the value of Datum.
func (s *Drucksache) SetDatum(val time.Time) {
	s.Datum = val
}

// SetAktualisiert sets the value of Aktualisiert.
func (s *Drucksache) SetAktualisiert(val time.Time) {
	s.Aktualisiert = val
}

// SetTitel sets the value of Titel.
func (s *Drucksache) SetTitel(val string) {
	s.Titel = val
}

// SetAutorenAnzeige sets the value of AutorenAnzeige.
func (s *Drucksache) SetAutorenAnzeige(val []DrucksacheAutorenAnzeigeItem) {
	s.AutorenAnzeige = val
}

// SetAutorenAnzahl sets the value of AutorenAnzahl.
func (s *Drucksache) SetAutorenAnzahl(val int32) {
	s.AutorenAnzahl = val
}

// SetFundstelle sets the value of Fundstelle.
func (s *Drucksache) SetFundstelle(val Fundstelle) {
	s.Fundstelle = val
}

// SetPdfHash sets the value of PdfHash.
func (s *Drucksache) SetPdfHash(val OptString) {
	s.PdfHash = val
}

// SetUrheber sets the value of Urheber.
func (s *Drucksache) SetUrheber(val []Urheber) {
	s.Urheber = val
}

// SetVorgangsbezug sets the value of Vorgangsbezug.
func (s *Drucksache) SetVorgangsbezug(val []Vorgangsbezug) {
	s.Vorgangsbezug = val
}

// SetVorgangsbezugAnzahl sets the value of VorgangsbezugAnzahl.
func (s *Drucksache) SetVorgangsbezugAnzahl(val int32) {
	s.VorgangsbezugAnzahl = val
}

// SetRessort sets the value of Ressort.
func (s *Drucksache) SetRessort(val []Ressort) {
	s.Ressort = val
}

// SetAnlagen sets the value of Anlagen.
func (s *Drucksache) SetAnlagen(val OptString) {
	s.Anlagen = val
}

func (*Drucksache) getDrucksacheRes() {}

type DrucksacheAutorenAnzeigeItem struct {
	// ID von Personenstammdaten.
	ID         string `json:"id"`
	Title      string `json:"title"`
	AutorTitel string `json:"autor_titel"`
}

// GetID returns the value of ID.
func (s *DrucksacheAutorenAnzeigeItem) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *DrucksacheAutorenAnzeigeItem) GetTitle() string {
	return s.Title
}

// GetAutorTitel returns the value of AutorTitel.
func (s *DrucksacheAutorenAnzeigeItem) GetAutorTitel() string {
	return s.AutorTitel
}

// SetID sets the value of ID.
func (s *DrucksacheAutorenAnzeigeItem) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *DrucksacheAutorenAnzeigeItem) SetTitle(val string) {
	s.Title = val
}

// SetAutorTitel sets the value of AutorTitel.
func (s *DrucksacheAutorenAnzeigeItem) SetAutorTitel(val string) {
	s.AutorTitel = val
}

type DrucksacheDokumentart string

const (
	DrucksacheDokumentartDrucksache DrucksacheDokumentart = "Drucksache"
)

// AllValues returns all DrucksacheDokumentart values.
func (DrucksacheDokumentart) AllValues() []DrucksacheDokumentart {
	return []DrucksacheDokumentart{
		DrucksacheDokumentartDrucksache,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DrucksacheDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case DrucksacheDokumentartDrucksache:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DrucksacheDokumentart) UnmarshalText(data []byte) error {
	switch DrucksacheDokumentart(data) {
	case DrucksacheDokumentartDrucksache:
		*s = DrucksacheDokumentartDrucksache
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DrucksacheHerausgeber string

const (
	DrucksacheHerausgeberBT DrucksacheHerausgeber = "BT"
	DrucksacheHerausgeberBR DrucksacheHerausgeber = "BR"
)

// AllValues returns all DrucksacheHerausgeber values.
func (DrucksacheHerausgeber) AllValues() []DrucksacheHerausgeber {
	return []DrucksacheHerausgeber{
		DrucksacheHerausgeberBT,
		DrucksacheHerausgeberBR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DrucksacheHerausgeber) MarshalText() ([]byte, error) {
	switch s {
	case DrucksacheHerausgeberBT:
		return []byte(s), nil
	case DrucksacheHerausgeberBR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DrucksacheHerausgeber) UnmarshalText(data []byte) error {
	switch DrucksacheHerausgeber(data) {
	case DrucksacheHerausgeberBT:
		*s = DrucksacheHerausgeberBT
		return nil
	case DrucksacheHerausgeberBR:
		*s = DrucksacheHerausgeberBR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/DrucksacheListResponse
type DrucksacheListResponse struct {
	NumFound  int32        `json:"numFound"`
	Cursor    string       `json:"cursor"`
	Documents []Drucksache `json:"documents"`
}

// GetNumFound returns the value of NumFound.
func (s *DrucksacheListResponse) GetNumFound() int32 {
	return s.NumFound
}

// GetCursor returns the value of Cursor.
func (s *DrucksacheListResponse) GetCursor() string {
	return s.Cursor
}

// GetDocuments returns the value of Documents.
func (s *DrucksacheListResponse) GetDocuments() []Drucksache {
	return s.Documents
}

// SetNumFound sets the value of NumFound.
func (s *DrucksacheListResponse) SetNumFound(val int32) {
	s.NumFound = val
}

// SetCursor sets the value of Cursor.
func (s *DrucksacheListResponse) SetCursor(val string) {
	s.Cursor = val
}

// SetDocuments sets the value of Documents.
func (s *DrucksacheListResponse) SetDocuments(val []Drucksache) {
	s.Documents = val
}

func (*DrucksacheListResponse) getDrucksacheListRes() {}

// Merged schema.
// Ref: #/components/schemas/DrucksacheText
type DrucksacheText struct {
	ID             string                    `json:"id"`
	Typ            DrucksacheTextTyp         `json:"typ"`
	Dokumentart    DrucksacheTextDokumentart `json:"dokumentart"`
	Drucksachetyp  string                    `json:"drucksachetyp"`
	Dokumentnummer string                    `json:"dokumentnummer"`
	Wahlperiode    OptInt32                  `json:"wahlperiode"`
	Herausgeber    DrucksacheTextHerausgeber `json:"herausgeber"`
	Datum          time.Time                 `json:"datum"`
	// Letzte Aktualisierung der Entität.
	Aktualisiert time.Time `json:"aktualisiert"`
	Titel        string    `json:"titel"`
	// Zusammenfassung der ersten 4 zur Anzeige markierten Autor:innen.
	AutorenAnzeige []DrucksacheTextAutorenAnzeigeItem `json:"autoren_anzeige"`
	// Gesamtzahl der Autor:innen.
	AutorenAnzahl int32      `json:"autoren_anzahl"`
	Fundstelle    Fundstelle `json:"fundstelle"`
	// MD5-Prüfsumme der PDF-Datei.
	PdfHash OptString `json:"pdf_hash"`
	Urheber []Urheber `json:"urheber"`
	// Zusammenfassung der ersten 4 zugehörigen Vorgänge.
	Vorgangsbezug []Vorgangsbezug `json:"vorgangsbezug"`
	// Gesamtzahl der zugehörigen Vorgänge.
	VorgangsbezugAnzahl int32     `json:"vorgangsbezug_anzahl"`
	Ressort             []Ressort `json:"ressort"`
	Anlagen             OptString `json:"anlagen"`
	// Volltext des Dokuments
	// Das Beispiel enthält einen gekürzten Auszug einer Drucksache.
	Text OptString `json:"text"`
}

// GetID returns the value of ID.
func (s *DrucksacheText) GetID() string {
	return s.ID
}

// GetTyp returns the value of Typ.
func (s *DrucksacheText) GetTyp() DrucksacheTextTyp {
	return s.Typ
}

// GetDokumentart returns the value of Dokumentart.
func (s *DrucksacheText) GetDokumentart() DrucksacheTextDokumentart {
	return s.Dokumentart
}

// GetDrucksachetyp returns the value of Drucksachetyp.
func (s *DrucksacheText) GetDrucksachetyp() string {
	return s.Drucksachetyp
}

// GetDokumentnummer returns the value of Dokumentnummer.
func (s *DrucksacheText) GetDokumentnummer() string {
	return s.Dokumentnummer
}

// GetWahlperiode returns the value of Wahlperiode.
func (s *DrucksacheText) GetWahlperiode() OptInt32 {
	return s.Wahlperiode
}

// GetHerausgeber returns the value of Herausgeber.
func (s *DrucksacheText) GetHerausgeber() DrucksacheTextHerausgeber {
	return s.Herausgeber
}

// GetDatum returns the value of Datum.
func (s *DrucksacheText) GetDatum() time.Time {
	return s.Datum
}

// GetAktualisiert returns the value of Aktualisiert.
func (s *DrucksacheText) GetAktualisiert() time.Time {
	return s.Aktualisiert
}

// GetTitel returns the value of Titel.
func (s *DrucksacheText) GetTitel() string {
	return s.Titel
}

// GetAutorenAnzeige returns the value of AutorenAnzeige.
func (s *DrucksacheText) GetAutorenAnzeige() []DrucksacheTextAutorenAnzeigeItem {
	return s.AutorenAnzeige
}

// GetAutorenAnzahl returns the value of AutorenAnzahl.
func (s *DrucksacheText) GetAutorenAnzahl() int32 {
	return s.AutorenAnzahl
}

// GetFundstelle returns the value of Fundstelle.
func (s *DrucksacheText) GetFundstelle() Fundstelle {
	return s.Fundstelle
}

// GetPdfHash returns the value of PdfHash.
func (s *DrucksacheText) GetPdfHash() OptString {
	return s.PdfHash
}

// GetUrheber returns the value of Urheber.
func (s *DrucksacheText) GetUrheber() []Urheber {
	return s.Urheber
}

// GetVorgangsbezug returns the value of Vorgangsbezug.
func (s *DrucksacheText) GetVorgangsbezug() []Vorgangsbezug {
	return s.Vorgangsbezug
}

// GetVorgangsbezugAnzahl returns the value of VorgangsbezugAnzahl.
func (s *DrucksacheText) GetVorgangsbezugAnzahl() int32 {
	return s.VorgangsbezugAnzahl
}

// GetRessort returns the value of Ressort.
func (s *DrucksacheText) GetRessort() []Ressort {
	return s.Ressort
}

// GetAnlagen returns the value of Anlagen.
func (s *DrucksacheText) GetAnlagen() OptString {
	return s.Anlagen
}

// GetText returns the value of Text.
func (s *DrucksacheText) GetText() OptString {
	return s.Text
}

// SetID sets the value of ID.
func (s *DrucksacheText) SetID(val string) {
	s.ID = val
}

// SetTyp sets the value of Typ.
func (s *DrucksacheText) SetTyp(val DrucksacheTextTyp) {
	s.Typ = val
}

// SetDokumentart sets the value of Dokumentart.
func (s *DrucksacheText) SetDokumentart(val DrucksacheTextDokumentart) {
	s.Dokumentart = val
}

// SetDrucksachetyp sets the value of Drucksachetyp.
func (s *DrucksacheText) SetDrucksachetyp(val string) {
	s.Drucksachetyp = val
}

// SetDokumentnummer sets the value of Dokumentnummer.
func (s *DrucksacheText) SetDokumentnummer(val string) {
	s.Dokumentnummer = val
}

// SetWahlperiode sets the value of Wahlperiode.
func (s *DrucksacheText) SetWahlperiode(val OptInt32) {
	s.Wahlperiode = val
}

// SetHerausgeber sets the value of Herausgeber.
func (s *DrucksacheText) SetHerausgeber(val DrucksacheTextHerausgeber) {
	s.Herausgeber = val
}

// SetDatum sets the value of Datum.
func (s *DrucksacheText) SetDatum(val time.Time) {
	s.Datum = val
}

// SetAktualisiert sets the value of Aktualisiert.
func (s *DrucksacheText) SetAktualisiert(val time.Time) {
	s.Aktualisiert = val
}

// SetTitel sets the value of Titel.
func (s *DrucksacheText) SetTitel(val string) {
	s.Titel = val
}

// SetAutorenAnzeige sets the value of AutorenAnzeige.
func (s *DrucksacheText) SetAutorenAnzeige(val []DrucksacheTextAutorenAnzeigeItem) {
	s.AutorenAnzeige = val
}

// SetAutorenAnzahl sets the value of AutorenAnzahl.
func (s *DrucksacheText) SetAutorenAnzahl(val int32) {
	s.AutorenAnzahl = val
}

// SetFundstelle sets the value of Fundstelle.
func (s *DrucksacheText) SetFundstelle(val Fundstelle) {
	s.Fundstelle = val
}

// SetPdfHash sets the value of PdfHash.
func (s *DrucksacheText) SetPdfHash(val OptString) {
	s.PdfHash = val
}

// SetUrheber sets the value of Urheber.
func (s *DrucksacheText) SetUrheber(val []Urheber) {
	s.Urheber = val
}

// SetVorgangsbezug sets the value of Vorgangsbezug.
func (s *DrucksacheText) SetVorgangsbezug(val []Vorgangsbezug) {
	s.Vorgangsbezug = val
}

// SetVorgangsbezugAnzahl sets the value of VorgangsbezugAnzahl.
func (s *DrucksacheText) SetVorgangsbezugAnzahl(val int32) {
	s.VorgangsbezugAnzahl = val
}

// SetRessort sets the value of Ressort.
func (s *DrucksacheText) SetRessort(val []Ressort) {
	s.Ressort = val
}

// SetAnlagen sets the value of Anlagen.
func (s *DrucksacheText) SetAnlagen(val OptString) {
	s.Anlagen = val
}

// SetText sets the value of Text.
func (s *DrucksacheText) SetText(val OptString) {
	s.Text = val
}

func (*DrucksacheText) getDrucksacheTextRes() {}

type DrucksacheTextAutorenAnzeigeItem struct {
	// ID von Personenstammdaten.
	ID         string `json:"id"`
	Title      string `json:"title"`
	AutorTitel string `json:"autor_titel"`
}

// GetID returns the value of ID.
func (s *DrucksacheTextAutorenAnzeigeItem) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *DrucksacheTextAutorenAnzeigeItem) GetTitle() string {
	return s.Title
}

// GetAutorTitel returns the value of AutorTitel.
func (s *DrucksacheTextAutorenAnzeigeItem) GetAutorTitel() string {
	return s.AutorTitel
}

// SetID sets the value of ID.
func (s *DrucksacheTextAutorenAnzeigeItem) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *DrucksacheTextAutorenAnzeigeItem) SetTitle(val string) {
	s.Title = val
}

// SetAutorTitel sets the value of AutorTitel.
func (s *DrucksacheTextAutorenAnzeigeItem) SetAutorTitel(val string) {
	s.AutorTitel = val
}

type DrucksacheTextDokumentart string

const (
	DrucksacheTextDokumentartDrucksache DrucksacheTextDokumentart = "Drucksache"
)

// AllValues returns all DrucksacheTextDokumentart values.
func (DrucksacheTextDokumentart) AllValues() []DrucksacheTextDokumentart {
	return []DrucksacheTextDokumentart{
		DrucksacheTextDokumentartDrucksache,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DrucksacheTextDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case DrucksacheTextDokumentartDrucksache:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DrucksacheTextDokumentart) UnmarshalText(data []byte) error {
	switch DrucksacheTextDokumentart(data) {
	case DrucksacheTextDokumentartDrucksache:
		*s = DrucksacheTextDokumentartDrucksache
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DrucksacheTextHerausgeber string

const (
	DrucksacheTextHerausgeberBT DrucksacheTextHerausgeber = "BT"
	DrucksacheTextHerausgeberBR DrucksacheTextHerausgeber = "BR"
)

// AllValues returns all DrucksacheTextHerausgeber values.
func (DrucksacheTextHerausgeber) AllValues() []DrucksacheTextHerausgeber {
	return []DrucksacheTextHerausgeber{
		DrucksacheTextHerausgeberBT,
		DrucksacheTextHerausgeberBR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DrucksacheTextHerausgeber) MarshalText() ([]byte, error) {
	switch s {
	case DrucksacheTextHerausgeberBT:
		return []byte(s), nil
	case DrucksacheTextHerausgeberBR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DrucksacheTextHerausgeber) UnmarshalText(data []byte) error {
	switch DrucksacheTextHerausgeber(data) {
	case DrucksacheTextHerausgeberBT:
		*s = DrucksacheTextHerausgeberBT
		return nil
	case DrucksacheTextHerausgeberBR:
		*s = DrucksacheTextHerausgeberBR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/DrucksacheTextListResponse
type DrucksacheTextListResponse struct {
	NumFound  int32            `json:"numFound"`
	Cursor    string           `json:"cursor"`
	Documents []DrucksacheText `json:"documents"`
}

// GetNumFound returns the value of NumFound.
func (s *DrucksacheTextListResponse) GetNumFound() int32 {
	return s.NumFound
}

// GetCursor returns the value of Cursor.
func (s *DrucksacheTextListResponse) GetCursor() string {
	return s.Cursor
}

// GetDocuments returns the value of Documents.
func (s *DrucksacheTextListResponse) GetDocuments() []DrucksacheText {
	return s.Documents
}

// SetNumFound sets the value of NumFound.
func (s *DrucksacheTextListResponse) SetNumFound(val int32) {
	s.NumFound = val
}

// SetCursor sets the value of Cursor.
func (s *DrucksacheTextListResponse) SetCursor(val string) {
	s.Cursor = val
}

// SetDocuments sets the value of Documents.
func (s *DrucksacheTextListResponse) SetDocuments(val []DrucksacheText) {
	s.Documents = val
}

func (*DrucksacheTextListResponse) getDrucksacheTextListRes() {}

type DrucksacheTextTyp string

const (
	DrucksacheTextTypDokument DrucksacheTextTyp = "Dokument"
)

// AllValues returns all DrucksacheTextTyp values.
func (DrucksacheTextTyp) AllValues() []DrucksacheTextTyp {
	return []DrucksacheTextTyp{
		DrucksacheTextTypDokument,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DrucksacheTextTyp) MarshalText() ([]byte, error) {
	switch s {
	case DrucksacheTextTypDokument:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DrucksacheTextTyp) UnmarshalText(data []byte) error {
	switch DrucksacheTextTyp(data) {
	case DrucksacheTextTypDokument:
		*s = DrucksacheTextTypDokument
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DrucksacheTyp string

const (
	DrucksacheTypDokument DrucksacheTyp = "Dokument"
)

// AllValues returns all DrucksacheTyp values.
func (DrucksacheTyp) AllValues() []DrucksacheTyp {
	return []DrucksacheTyp{
		DrucksacheTypDokument,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DrucksacheTyp) MarshalText() ([]byte, error) {
	switch s {
	case DrucksacheTypDokument:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DrucksacheTyp) UnmarshalText(data []byte) error {
	switch DrucksacheTyp(data) {
	case DrucksacheTypDokument:
		*s = DrucksacheTypDokument
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Liefert im Vorgangsablauf das zu einem Vorgangsschritt gehörende Dokument (Drucksache oder
// Protokoll).
// Beispiel: „BT-Drucksache 19/1 (Antrag Fraktion der CDU/CSU)“ oder beim Vorgangsschritt
// Beratung „BT-Plenarprotokoll 19/1, S. 4C-12A“.
// Ref: #/components/schemas/Fundstelle
type Fundstelle struct {
	// ID einer Drucksache oder eines Plenarprotokolls.
	ID              string                `json:"id"`
	Dokumentart     FundstelleDokumentart `json:"dokumentart"`
	PdfURL          OptString             `json:"pdf_url"`
	Dokumentnummer  string                `json:"dokumentnummer"`
	Datum           time.Time             `json:"datum"`
	Drucksachetyp   OptString             `json:"drucksachetyp"`
	Herausgeber     Zuordnung             `json:"herausgeber"`
	Urheber         []string              `json:"urheber"`
	Verteildatum    OptDate               `json:"verteildatum"`
	Seite           OptString             `json:"seite"`
	Anfangsseite    OptInt                `json:"anfangsseite"`
	Endseite        OptInt                `json:"endseite"`
	Anfangsquadrant OptQuadrant           `json:"anfangsquadrant"`
	Endquadrant     OptQuadrant           `json:"endquadrant"`
	FrageNummer     OptString             `json:"frage_nummer"`
	Anlagen         OptString             `json:"anlagen"`
	Top             OptInt32              `json:"top"`
	TopZusatz       OptString             `json:"top_zusatz"`
}

// GetID returns the value of ID.
func (s *Fundstelle) GetID() string {
	return s.ID
}

// GetDokumentart returns the value of Dokumentart.
func (s *Fundstelle) GetDokumentart() FundstelleDokumentart {
	return s.Dokumentart
}

// GetPdfURL returns the value of PdfURL.
func (s *Fundstelle) GetPdfURL() OptString {
	return s.PdfURL
}

// GetDokumentnummer returns the value of Dokumentnummer.
func (s *Fundstelle) GetDokumentnummer() string {
	return s.Dokumentnummer
}

// GetDatum returns the value of Datum.
func (s *Fundstelle) GetDatum() time.Time {
	return s.Datum
}

// GetDrucksachetyp returns the value of Drucksachetyp.
func (s *Fundstelle) GetDrucksachetyp() OptString {
	return s.Drucksachetyp
}

// GetHerausgeber returns the value of Herausgeber.
func (s *Fundstelle) GetHerausgeber() Zuordnung {
	return s.Herausgeber
}

// GetUrheber returns the value of Urheber.
func (s *Fundstelle) GetUrheber() []string {
	return s.Urheber
}

// GetVerteildatum returns the value of Verteildatum.
func (s *Fundstelle) GetVerteildatum() OptDate {
	return s.Verteildatum
}

// GetSeite returns the value of Seite.
func (s *Fundstelle) GetSeite() OptString {
	return s.Seite
}

// GetAnfangsseite returns the value of Anfangsseite.
func (s *Fundstelle) GetAnfangsseite() OptInt {
	return s.Anfangsseite
}

// GetEndseite returns the value of Endseite.
func (s *Fundstelle) GetEndseite() OptInt {
	return s.Endseite
}

// GetAnfangsquadrant returns the value of Anfangsquadrant.
func (s *Fundstelle) GetAnfangsquadrant() OptQuadrant {
	return s.Anfangsquadrant
}

// GetEndquadrant returns the value of Endquadrant.
func (s *Fundstelle) GetEndquadrant() OptQuadrant {
	return s.Endquadrant
}

// GetFrageNummer returns the value of FrageNummer.
func (s *Fundstelle) GetFrageNummer() OptString {
	return s.FrageNummer
}

// GetAnlagen returns the value of Anlagen.
func (s *Fundstelle) GetAnlagen() OptString {
	return s.Anlagen
}

// GetTop returns the value of Top.
func (s *Fundstelle) GetTop() OptInt32 {
	return s.Top
}

// GetTopZusatz returns the value of TopZusatz.
func (s *Fundstelle) GetTopZusatz() OptString {
	return s.TopZusatz
}

// SetID sets the value of ID.
func (s *Fundstelle) SetID(val string) {
	s.ID = val
}

// SetDokumentart sets the value of Dokumentart.
func (s *Fundstelle) SetDokumentart(val FundstelleDokumentart) {
	s.Dokumentart = val
}

// SetPdfURL sets the value of PdfURL.
func (s *Fundstelle) SetPdfURL(val OptString) {
	s.PdfURL = val
}

// SetDokumentnummer sets the value of Dokumentnummer.
func (s *Fundstelle) SetDokumentnummer(val string) {
	s.Dokumentnummer = val
}

// SetDatum sets the value of Datum.
func (s *Fundstelle) SetDatum(val time.Time) {
	s.Datum = val
}

// SetDrucksachetyp sets the value of Drucksachetyp.
func (s *Fundstelle) SetDrucksachetyp(val OptString) {
	s.Drucksachetyp = val
}

// SetHerausgeber sets the value of Herausgeber.
func (s *Fundstelle) SetHerausgeber(val Zuordnung) {
	s.Herausgeber = val
}

// SetUrheber sets the value of Urheber.
func (s *Fundstelle) SetUrheber(val []string) {
	s.Urheber = val
}

// SetVerteildatum sets the value of Verteildatum.
func (s *Fundstelle) SetVerteildatum(val OptDate) {
	s.Verteildatum = val
}

// SetSeite sets the value of Seite.
func (s *Fundstelle) SetSeite(val OptString) {
	s.Seite = val
}

// SetAnfangsseite sets the value of Anfangsseite.
func (s *Fundstelle) SetAnfangsseite(val OptInt) {
	s.Anfangsseite = val
}

// SetEndseite sets the value of Endseite.
func (s *Fundstelle) SetEndseite(val OptInt) {
	s.Endseite = val
}

// SetAnfangsquadrant sets the value of Anfangsquadrant.
func (s *Fundstelle) SetAnfangsquadrant(val OptQuadrant) {
	s.Anfangsquadrant = val
}

// SetEndquadrant sets the value of Endquadrant.
func (s *Fundstelle) SetEndquadrant(val OptQuadrant) {
	s.Endquadrant = val
}

// SetFrageNummer sets the value of FrageNummer.
func (s *Fundstelle) SetFrageNummer(val OptString) {
	s.FrageNummer = val
}

// SetAnlagen sets the value of Anlagen.
func (s *Fundstelle) SetAnlagen(val OptString) {
	s.Anlagen = val
}

// SetTop sets the value of Top.
func (s *Fundstelle) SetTop(val OptInt32) {
	s.Top = val
}

// SetTopZusatz sets the value of TopZusatz.
func (s *Fundstelle) SetTopZusatz(val OptString) {
	s.TopZusatz = val
}

type FundstelleDokumentart string

const (
	FundstelleDokumentartDrucksache      FundstelleDokumentart = "Drucksache"
	FundstelleDokumentartPlenarprotokoll FundstelleDokumentart = "Plenarprotokoll"
)

// AllValues returns all FundstelleDokumentart values.
func (FundstelleDokumentart) AllValues() []FundstelleDokumentart {
	return []FundstelleDokumentart{
		FundstelleDokumentartDrucksache,
		FundstelleDokumentartPlenarprotokoll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FundstelleDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case FundstelleDokumentartDrucksache:
		return []byte(s), nil
	case FundstelleDokumentartPlenarprotokoll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FundstelleDokumentart) UnmarshalText(data []byte) error {
	switch FundstelleDokumentart(data) {
	case FundstelleDokumentartDrucksache:
		*s = FundstelleDokumentartDrucksache
		return nil
	case FundstelleDokumentartPlenarprotokoll:
		*s = FundstelleDokumentartPlenarprotokoll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAktivitaetFormat string

const (
	GetAktivitaetFormatJSON GetAktivitaetFormat = "json"
	GetAktivitaetFormatXML  GetAktivitaetFormat = "xml"
)

// AllValues returns all GetAktivitaetFormat values.
func (GetAktivitaetFormat) AllValues() []GetAktivitaetFormat {
	return []GetAktivitaetFormat{
		GetAktivitaetFormatJSON,
		GetAktivitaetFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAktivitaetFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetAktivitaetFormatJSON:
		return []byte(s), nil
	case GetAktivitaetFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAktivitaetFormat) UnmarshalText(data []byte) error {
	switch GetAktivitaetFormat(data) {
	case GetAktivitaetFormatJSON:
		*s = GetAktivitaetFormatJSON
		return nil
	case GetAktivitaetFormatXML:
		*s = GetAktivitaetFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAktivitaetListFDokumentart string

const (
	GetAktivitaetListFDokumentartDrucksache      GetAktivitaetListFDokumentart = "Drucksache"
	GetAktivitaetListFDokumentartPlenarprotokoll GetAktivitaetListFDokumentart = "Plenarprotokoll"
)

// AllValues returns all GetAktivitaetListFDokumentart values.
func (GetAktivitaetListFDokumentart) AllValues() []GetAktivitaetListFDokumentart {
	return []GetAktivitaetListFDokumentart{
		GetAktivitaetListFDokumentartDrucksache,
		GetAktivitaetListFDokumentartPlenarprotokoll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAktivitaetListFDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case GetAktivitaetListFDokumentartDrucksache:
		return []byte(s), nil
	case GetAktivitaetListFDokumentartPlenarprotokoll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAktivitaetListFDokumentart) UnmarshalText(data []byte) error {
	switch GetAktivitaetListFDokumentart(data) {
	case GetAktivitaetListFDokumentartDrucksache:
		*s = GetAktivitaetListFDokumentartDrucksache
		return nil
	case GetAktivitaetListFDokumentartPlenarprotokoll:
		*s = GetAktivitaetListFDokumentartPlenarprotokoll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAktivitaetListFormat string

const (
	GetAktivitaetListFormatJSON GetAktivitaetListFormat = "json"
	GetAktivitaetListFormatXML  GetAktivitaetListFormat = "xml"
)

// AllValues returns all GetAktivitaetListFormat values.
func (GetAktivitaetListFormat) AllValues() []GetAktivitaetListFormat {
	return []GetAktivitaetListFormat{
		GetAktivitaetListFormatJSON,
		GetAktivitaetListFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAktivitaetListFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetAktivitaetListFormatJSON:
		return []byte(s), nil
	case GetAktivitaetListFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAktivitaetListFormat) UnmarshalText(data []byte) error {
	switch GetAktivitaetListFormat(data) {
	case GetAktivitaetListFormatJSON:
		*s = GetAktivitaetListFormatJSON
		return nil
	case GetAktivitaetListFormatXML:
		*s = GetAktivitaetListFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AktivitaetListResponse
type GetAktivitaetListOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetAktivitaetListOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetAktivitaetListOKApplicationXML) getAktivitaetListRes() {}

type GetDrucksacheFormat string

const (
	GetDrucksacheFormatJSON GetDrucksacheFormat = "json"
	GetDrucksacheFormatXML  GetDrucksacheFormat = "xml"
)

// AllValues returns all GetDrucksacheFormat values.
func (GetDrucksacheFormat) AllValues() []GetDrucksacheFormat {
	return []GetDrucksacheFormat{
		GetDrucksacheFormatJSON,
		GetDrucksacheFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetDrucksacheFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetDrucksacheFormatJSON:
		return []byte(s), nil
	case GetDrucksacheFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetDrucksacheFormat) UnmarshalText(data []byte) error {
	switch GetDrucksacheFormat(data) {
	case GetDrucksacheFormatJSON:
		*s = GetDrucksacheFormatJSON
		return nil
	case GetDrucksacheFormatXML:
		*s = GetDrucksacheFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetDrucksacheListFormat string

const (
	GetDrucksacheListFormatJSON GetDrucksacheListFormat = "json"
	GetDrucksacheListFormatXML  GetDrucksacheListFormat = "xml"
)

// AllValues returns all GetDrucksacheListFormat values.
func (GetDrucksacheListFormat) AllValues() []GetDrucksacheListFormat {
	return []GetDrucksacheListFormat{
		GetDrucksacheListFormatJSON,
		GetDrucksacheListFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetDrucksacheListFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetDrucksacheListFormatJSON:
		return []byte(s), nil
	case GetDrucksacheListFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetDrucksacheListFormat) UnmarshalText(data []byte) error {
	switch GetDrucksacheListFormat(data) {
	case GetDrucksacheListFormatJSON:
		*s = GetDrucksacheListFormatJSON
		return nil
	case GetDrucksacheListFormatXML:
		*s = GetDrucksacheListFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DrucksacheListResponse
type GetDrucksacheListOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetDrucksacheListOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetDrucksacheListOKApplicationXML) getDrucksacheListRes() {}

type GetDrucksacheTextFormat string

const (
	GetDrucksacheTextFormatJSON GetDrucksacheTextFormat = "json"
	GetDrucksacheTextFormatXML  GetDrucksacheTextFormat = "xml"
)

// AllValues returns all GetDrucksacheTextFormat values.
func (GetDrucksacheTextFormat) AllValues() []GetDrucksacheTextFormat {
	return []GetDrucksacheTextFormat{
		GetDrucksacheTextFormatJSON,
		GetDrucksacheTextFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetDrucksacheTextFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetDrucksacheTextFormatJSON:
		return []byte(s), nil
	case GetDrucksacheTextFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetDrucksacheTextFormat) UnmarshalText(data []byte) error {
	switch GetDrucksacheTextFormat(data) {
	case GetDrucksacheTextFormatJSON:
		*s = GetDrucksacheTextFormatJSON
		return nil
	case GetDrucksacheTextFormatXML:
		*s = GetDrucksacheTextFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetDrucksacheTextListFormat string

const (
	GetDrucksacheTextListFormatJSON GetDrucksacheTextListFormat = "json"
	GetDrucksacheTextListFormatXML  GetDrucksacheTextListFormat = "xml"
)

// AllValues returns all GetDrucksacheTextListFormat values.
func (GetDrucksacheTextListFormat) AllValues() []GetDrucksacheTextListFormat {
	return []GetDrucksacheTextListFormat{
		GetDrucksacheTextListFormatJSON,
		GetDrucksacheTextListFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetDrucksacheTextListFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetDrucksacheTextListFormatJSON:
		return []byte(s), nil
	case GetDrucksacheTextListFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetDrucksacheTextListFormat) UnmarshalText(data []byte) error {
	switch GetDrucksacheTextListFormat(data) {
	case GetDrucksacheTextListFormatJSON:
		*s = GetDrucksacheTextListFormatJSON
		return nil
	case GetDrucksacheTextListFormatXML:
		*s = GetDrucksacheTextListFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DrucksacheTextListResponse
type GetDrucksacheTextListOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetDrucksacheTextListOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetDrucksacheTextListOKApplicationXML) getDrucksacheTextListRes() {}

// Ref: #/components/schemas/DrucksacheText
type GetDrucksacheTextOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetDrucksacheTextOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetDrucksacheTextOKApplicationXML) getDrucksacheTextRes() {}

type GetPersonFormat string

const (
	GetPersonFormatJSON GetPersonFormat = "json"
	GetPersonFormatXML  GetPersonFormat = "xml"
)

// AllValues returns all GetPersonFormat values.
func (GetPersonFormat) AllValues() []GetPersonFormat {
	return []GetPersonFormat{
		GetPersonFormatJSON,
		GetPersonFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPersonFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetPersonFormatJSON:
		return []byte(s), nil
	case GetPersonFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPersonFormat) UnmarshalText(data []byte) error {
	switch GetPersonFormat(data) {
	case GetPersonFormatJSON:
		*s = GetPersonFormatJSON
		return nil
	case GetPersonFormatXML:
		*s = GetPersonFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPersonListFormat string

const (
	GetPersonListFormatJSON GetPersonListFormat = "json"
	GetPersonListFormatXML  GetPersonListFormat = "xml"
)

// AllValues returns all GetPersonListFormat values.
func (GetPersonListFormat) AllValues() []GetPersonListFormat {
	return []GetPersonListFormat{
		GetPersonListFormatJSON,
		GetPersonListFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPersonListFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetPersonListFormatJSON:
		return []byte(s), nil
	case GetPersonListFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPersonListFormat) UnmarshalText(data []byte) error {
	switch GetPersonListFormat(data) {
	case GetPersonListFormatJSON:
		*s = GetPersonListFormatJSON
		return nil
	case GetPersonListFormatXML:
		*s = GetPersonListFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PersonListResponse
type GetPersonListOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPersonListOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPersonListOKApplicationXML) getPersonListRes() {}

type GetPlenarprotokollFormat string

const (
	GetPlenarprotokollFormatJSON GetPlenarprotokollFormat = "json"
	GetPlenarprotokollFormatXML  GetPlenarprotokollFormat = "xml"
)

// AllValues returns all GetPlenarprotokollFormat values.
func (GetPlenarprotokollFormat) AllValues() []GetPlenarprotokollFormat {
	return []GetPlenarprotokollFormat{
		GetPlenarprotokollFormatJSON,
		GetPlenarprotokollFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPlenarprotokollFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetPlenarprotokollFormatJSON:
		return []byte(s), nil
	case GetPlenarprotokollFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPlenarprotokollFormat) UnmarshalText(data []byte) error {
	switch GetPlenarprotokollFormat(data) {
	case GetPlenarprotokollFormatJSON:
		*s = GetPlenarprotokollFormatJSON
		return nil
	case GetPlenarprotokollFormatXML:
		*s = GetPlenarprotokollFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPlenarprotokollListFormat string

const (
	GetPlenarprotokollListFormatJSON GetPlenarprotokollListFormat = "json"
	GetPlenarprotokollListFormatXML  GetPlenarprotokollListFormat = "xml"
)

// AllValues returns all GetPlenarprotokollListFormat values.
func (GetPlenarprotokollListFormat) AllValues() []GetPlenarprotokollListFormat {
	return []GetPlenarprotokollListFormat{
		GetPlenarprotokollListFormatJSON,
		GetPlenarprotokollListFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPlenarprotokollListFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetPlenarprotokollListFormatJSON:
		return []byte(s), nil
	case GetPlenarprotokollListFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPlenarprotokollListFormat) UnmarshalText(data []byte) error {
	switch GetPlenarprotokollListFormat(data) {
	case GetPlenarprotokollListFormatJSON:
		*s = GetPlenarprotokollListFormatJSON
		return nil
	case GetPlenarprotokollListFormatXML:
		*s = GetPlenarprotokollListFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PlenarprotokollListResponse
type GetPlenarprotokollListOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPlenarprotokollListOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPlenarprotokollListOKApplicationXML) getPlenarprotokollListRes() {}

type GetPlenarprotokollTextFormat string

const (
	GetPlenarprotokollTextFormatJSON GetPlenarprotokollTextFormat = "json"
	GetPlenarprotokollTextFormatXML  GetPlenarprotokollTextFormat = "xml"
)

// AllValues returns all GetPlenarprotokollTextFormat values.
func (GetPlenarprotokollTextFormat) AllValues() []GetPlenarprotokollTextFormat {
	return []GetPlenarprotokollTextFormat{
		GetPlenarprotokollTextFormatJSON,
		GetPlenarprotokollTextFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPlenarprotokollTextFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetPlenarprotokollTextFormatJSON:
		return []byte(s), nil
	case GetPlenarprotokollTextFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPlenarprotokollTextFormat) UnmarshalText(data []byte) error {
	switch GetPlenarprotokollTextFormat(data) {
	case GetPlenarprotokollTextFormatJSON:
		*s = GetPlenarprotokollTextFormatJSON
		return nil
	case GetPlenarprotokollTextFormatXML:
		*s = GetPlenarprotokollTextFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPlenarprotokollTextListFormat string

const (
	GetPlenarprotokollTextListFormatJSON GetPlenarprotokollTextListFormat = "json"
	GetPlenarprotokollTextListFormatXML  GetPlenarprotokollTextListFormat = "xml"
)

// AllValues returns all GetPlenarprotokollTextListFormat values.
func (GetPlenarprotokollTextListFormat) AllValues() []GetPlenarprotokollTextListFormat {
	return []GetPlenarprotokollTextListFormat{
		GetPlenarprotokollTextListFormatJSON,
		GetPlenarprotokollTextListFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPlenarprotokollTextListFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetPlenarprotokollTextListFormatJSON:
		return []byte(s), nil
	case GetPlenarprotokollTextListFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPlenarprotokollTextListFormat) UnmarshalText(data []byte) error {
	switch GetPlenarprotokollTextListFormat(data) {
	case GetPlenarprotokollTextListFormatJSON:
		*s = GetPlenarprotokollTextListFormatJSON
		return nil
	case GetPlenarprotokollTextListFormatXML:
		*s = GetPlenarprotokollTextListFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PlenarprotokollTextListResponse
type GetPlenarprotokollTextListOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPlenarprotokollTextListOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPlenarprotokollTextListOKApplicationXML) getPlenarprotokollTextListRes() {}

// Ref: #/components/schemas/PlenarprotokollText
type GetPlenarprotokollTextOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPlenarprotokollTextOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPlenarprotokollTextOKApplicationXML) getPlenarprotokollTextRes() {}

type GetVorgangFormat string

const (
	GetVorgangFormatJSON GetVorgangFormat = "json"
	GetVorgangFormatXML  GetVorgangFormat = "xml"
)

// AllValues returns all GetVorgangFormat values.
func (GetVorgangFormat) AllValues() []GetVorgangFormat {
	return []GetVorgangFormat{
		GetVorgangFormatJSON,
		GetVorgangFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetVorgangFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetVorgangFormatJSON:
		return []byte(s), nil
	case GetVorgangFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetVorgangFormat) UnmarshalText(data []byte) error {
	switch GetVorgangFormat(data) {
	case GetVorgangFormatJSON:
		*s = GetVorgangFormatJSON
		return nil
	case GetVorgangFormatXML:
		*s = GetVorgangFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetVorgangListFDokumentart string

const (
	GetVorgangListFDokumentartDrucksache      GetVorgangListFDokumentart = "Drucksache"
	GetVorgangListFDokumentartPlenarprotokoll GetVorgangListFDokumentart = "Plenarprotokoll"
)

// AllValues returns all GetVorgangListFDokumentart values.
func (GetVorgangListFDokumentart) AllValues() []GetVorgangListFDokumentart {
	return []GetVorgangListFDokumentart{
		GetVorgangListFDokumentartDrucksache,
		GetVorgangListFDokumentartPlenarprotokoll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetVorgangListFDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case GetVorgangListFDokumentartDrucksache:
		return []byte(s), nil
	case GetVorgangListFDokumentartPlenarprotokoll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetVorgangListFDokumentart) UnmarshalText(data []byte) error {
	switch GetVorgangListFDokumentart(data) {
	case GetVorgangListFDokumentartDrucksache:
		*s = GetVorgangListFDokumentartDrucksache
		return nil
	case GetVorgangListFDokumentartPlenarprotokoll:
		*s = GetVorgangListFDokumentartPlenarprotokoll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetVorgangListFormat string

const (
	GetVorgangListFormatJSON GetVorgangListFormat = "json"
	GetVorgangListFormatXML  GetVorgangListFormat = "xml"
)

// AllValues returns all GetVorgangListFormat values.
func (GetVorgangListFormat) AllValues() []GetVorgangListFormat {
	return []GetVorgangListFormat{
		GetVorgangListFormatJSON,
		GetVorgangListFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetVorgangListFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetVorgangListFormatJSON:
		return []byte(s), nil
	case GetVorgangListFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetVorgangListFormat) UnmarshalText(data []byte) error {
	switch GetVorgangListFormat(data) {
	case GetVorgangListFormatJSON:
		*s = GetVorgangListFormatJSON
		return nil
	case GetVorgangListFormatXML:
		*s = GetVorgangListFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VorgangListResponse
type GetVorgangListOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVorgangListOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetVorgangListOKApplicationXML) getVorgangListRes() {}

type GetVorgangspositionFormat string

const (
	GetVorgangspositionFormatJSON GetVorgangspositionFormat = "json"
	GetVorgangspositionFormatXML  GetVorgangspositionFormat = "xml"
)

// AllValues returns all GetVorgangspositionFormat values.
func (GetVorgangspositionFormat) AllValues() []GetVorgangspositionFormat {
	return []GetVorgangspositionFormat{
		GetVorgangspositionFormatJSON,
		GetVorgangspositionFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetVorgangspositionFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetVorgangspositionFormatJSON:
		return []byte(s), nil
	case GetVorgangspositionFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetVorgangspositionFormat) UnmarshalText(data []byte) error {
	switch GetVorgangspositionFormat(data) {
	case GetVorgangspositionFormatJSON:
		*s = GetVorgangspositionFormatJSON
		return nil
	case GetVorgangspositionFormatXML:
		*s = GetVorgangspositionFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetVorgangspositionListFDokumentart string

const (
	GetVorgangspositionListFDokumentartDrucksache      GetVorgangspositionListFDokumentart = "Drucksache"
	GetVorgangspositionListFDokumentartPlenarprotokoll GetVorgangspositionListFDokumentart = "Plenarprotokoll"
)

// AllValues returns all GetVorgangspositionListFDokumentart values.
func (GetVorgangspositionListFDokumentart) AllValues() []GetVorgangspositionListFDokumentart {
	return []GetVorgangspositionListFDokumentart{
		GetVorgangspositionListFDokumentartDrucksache,
		GetVorgangspositionListFDokumentartPlenarprotokoll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetVorgangspositionListFDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case GetVorgangspositionListFDokumentartDrucksache:
		return []byte(s), nil
	case GetVorgangspositionListFDokumentartPlenarprotokoll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetVorgangspositionListFDokumentart) UnmarshalText(data []byte) error {
	switch GetVorgangspositionListFDokumentart(data) {
	case GetVorgangspositionListFDokumentartDrucksache:
		*s = GetVorgangspositionListFDokumentartDrucksache
		return nil
	case GetVorgangspositionListFDokumentartPlenarprotokoll:
		*s = GetVorgangspositionListFDokumentartPlenarprotokoll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetVorgangspositionListFormat string

const (
	GetVorgangspositionListFormatJSON GetVorgangspositionListFormat = "json"
	GetVorgangspositionListFormatXML  GetVorgangspositionListFormat = "xml"
)

// AllValues returns all GetVorgangspositionListFormat values.
func (GetVorgangspositionListFormat) AllValues() []GetVorgangspositionListFormat {
	return []GetVorgangspositionListFormat{
		GetVorgangspositionListFormatJSON,
		GetVorgangspositionListFormatXML,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetVorgangspositionListFormat) MarshalText() ([]byte, error) {
	switch s {
	case GetVorgangspositionListFormatJSON:
		return []byte(s), nil
	case GetVorgangspositionListFormatXML:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetVorgangspositionListFormat) UnmarshalText(data []byte) error {
	switch GetVorgangspositionListFormat(data) {
	case GetVorgangspositionListFormatJSON:
		*s = GetVorgangspositionListFormatJSON
		return nil
	case GetVorgangspositionListFormatXML:
		*s = GetVorgangspositionListFormatXML
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VorgangspositionListResponse
type GetVorgangspositionListOKApplicationXML struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetVorgangspositionListOKApplicationXML) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetVorgangspositionListOKApplicationXML) getVorgangspositionListRes() {}

// Liefert im Gesetzgebungsvorgang zu einem verkündeten Gesetz das Datum des Tages, an dem das
// Gesetz in Kraft tritt bzw. an dem Teile eines Gesetzes in Kraft treten.
// Ref: #/components/schemas/Inkrafttreten
type Inkrafttreten struct {
	Datum        time.Time `json:"datum"`
	Erlaeuterung OptString `json:"erlaeuterung"`
}

// GetDatum returns the value of Datum.
func (s *Inkrafttreten) GetDatum() time.Time {
	return s.Datum
}

// GetErlaeuterung returns the value of Erlaeuterung.
func (s *Inkrafttreten) GetErlaeuterung() OptString {
	return s.Erlaeuterung
}

// SetDatum sets the value of Datum.
func (s *Inkrafttreten) SetDatum(val time.Time) {
	s.Datum = val
}

// SetErlaeuterung sets the value of Erlaeuterung.
func (s *Inkrafttreten) SetErlaeuterung(val OptString) {
	s.Erlaeuterung = val
}

type NotFoundResponse struct {
	Code    NotFoundResponseCode `json:"code"`
	Message string               `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundResponse) GetCode() NotFoundResponseCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundResponse) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundResponse) SetCode(val NotFoundResponseCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundResponse) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundResponse) getAktivitaetRes()          {}
func (*NotFoundResponse) getDrucksacheRes()          {}
func (*NotFoundResponse) getDrucksacheTextRes()      {}
func (*NotFoundResponse) getPersonRes()              {}
func (*NotFoundResponse) getPlenarprotokollRes()     {}
func (*NotFoundResponse) getPlenarprotokollTextRes() {}
func (*NotFoundResponse) getVorgangRes()             {}
func (*NotFoundResponse) getVorgangspositionRes()    {}

type NotFoundResponseCode int

const (
	NotFoundResponseCode404 NotFoundResponseCode = 404
)

// AllValues returns all NotFoundResponseCode values.
func (NotFoundResponseCode) AllValues() []NotFoundResponseCode {
	return []NotFoundResponseCode{
		NotFoundResponseCode404,
	}
}

// NewOptBeschlussfassungAbstimmungsart returns new OptBeschlussfassungAbstimmungsart with value set to v.
func NewOptBeschlussfassungAbstimmungsart(v BeschlussfassungAbstimmungsart) OptBeschlussfassungAbstimmungsart {
	return OptBeschlussfassungAbstimmungsart{
		Value: v,
		Set:   true,
	}
}

// OptBeschlussfassungAbstimmungsart is optional BeschlussfassungAbstimmungsart.
type OptBeschlussfassungAbstimmungsart struct {
	Value BeschlussfassungAbstimmungsart
	Set   bool
}

// IsSet returns true if OptBeschlussfassungAbstimmungsart was set.
func (o OptBeschlussfassungAbstimmungsart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBeschlussfassungAbstimmungsart) Reset() {
	var v BeschlussfassungAbstimmungsart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBeschlussfassungAbstimmungsart) SetTo(v BeschlussfassungAbstimmungsart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBeschlussfassungAbstimmungsart) Get() (v BeschlussfassungAbstimmungsart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBeschlussfassungAbstimmungsart) Or(d BeschlussfassungAbstimmungsart) BeschlussfassungAbstimmungsart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBeschlussfassungMehrheit returns new OptBeschlussfassungMehrheit with value set to v.
func NewOptBeschlussfassungMehrheit(v BeschlussfassungMehrheit) OptBeschlussfassungMehrheit {
	return OptBeschlussfassungMehrheit{
		Value: v,
		Set:   true,
	}
}

// OptBeschlussfassungMehrheit is optional BeschlussfassungMehrheit.
type OptBeschlussfassungMehrheit struct {
	Value BeschlussfassungMehrheit
	Set   bool
}

// IsSet returns true if OptBeschlussfassungMehrheit was set.
func (o OptBeschlussfassungMehrheit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBeschlussfassungMehrheit) Reset() {
	var v BeschlussfassungMehrheit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBeschlussfassungMehrheit) SetTo(v BeschlussfassungMehrheit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBeschlussfassungMehrheit) Get() (v BeschlussfassungMehrheit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBeschlussfassungMehrheit) Or(d BeschlussfassungMehrheit) BeschlussfassungMehrheit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBundesland returns new OptBundesland with value set to v.
func NewOptBundesland(v Bundesland) OptBundesland {
	return OptBundesland{
		Value: v,
		Set:   true,
	}
}

// OptBundesland is optional Bundesland.
type OptBundesland struct {
	Value Bundesland
	Set   bool
}

// IsSet returns true if OptBundesland was set.
func (o OptBundesland) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBundesland) Reset() {
	var v Bundesland
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBundesland) SetTo(v Bundesland) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBundesland) Get() (v Bundesland, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBundesland) Or(d Bundesland) Bundesland {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatum returns new OptDatum with value set to v.
func NewOptDatum(v Datum) OptDatum {
	return OptDatum{
		Value: v,
		Set:   true,
	}
}

// OptDatum is optional Datum.
type OptDatum struct {
	Value Datum
	Set   bool
}

// IsSet returns true if OptDatum was set.
func (o OptDatum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatum) Reset() {
	var v Datum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatum) SetTo(v Datum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatum) Get() (v Datum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatum) Or(d Datum) Datum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAktivitaetFormat returns new OptGetAktivitaetFormat with value set to v.
func NewOptGetAktivitaetFormat(v GetAktivitaetFormat) OptGetAktivitaetFormat {
	return OptGetAktivitaetFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetAktivitaetFormat is optional GetAktivitaetFormat.
type OptGetAktivitaetFormat struct {
	Value GetAktivitaetFormat
	Set   bool
}

// IsSet returns true if OptGetAktivitaetFormat was set.
func (o OptGetAktivitaetFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAktivitaetFormat) Reset() {
	var v GetAktivitaetFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAktivitaetFormat) SetTo(v GetAktivitaetFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAktivitaetFormat) Get() (v GetAktivitaetFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAktivitaetFormat) Or(d GetAktivitaetFormat) GetAktivitaetFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAktivitaetListFDokumentart returns new OptGetAktivitaetListFDokumentart with value set to v.
func NewOptGetAktivitaetListFDokumentart(v GetAktivitaetListFDokumentart) OptGetAktivitaetListFDokumentart {
	return OptGetAktivitaetListFDokumentart{
		Value: v,
		Set:   true,
	}
}

// OptGetAktivitaetListFDokumentart is optional GetAktivitaetListFDokumentart.
type OptGetAktivitaetListFDokumentart struct {
	Value GetAktivitaetListFDokumentart
	Set   bool
}

// IsSet returns true if OptGetAktivitaetListFDokumentart was set.
func (o OptGetAktivitaetListFDokumentart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAktivitaetListFDokumentart) Reset() {
	var v GetAktivitaetListFDokumentart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAktivitaetListFDokumentart) SetTo(v GetAktivitaetListFDokumentart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAktivitaetListFDokumentart) Get() (v GetAktivitaetListFDokumentart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAktivitaetListFDokumentart) Or(d GetAktivitaetListFDokumentart) GetAktivitaetListFDokumentart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAktivitaetListFormat returns new OptGetAktivitaetListFormat with value set to v.
func NewOptGetAktivitaetListFormat(v GetAktivitaetListFormat) OptGetAktivitaetListFormat {
	return OptGetAktivitaetListFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetAktivitaetListFormat is optional GetAktivitaetListFormat.
type OptGetAktivitaetListFormat struct {
	Value GetAktivitaetListFormat
	Set   bool
}

// IsSet returns true if OptGetAktivitaetListFormat was set.
func (o OptGetAktivitaetListFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAktivitaetListFormat) Reset() {
	var v GetAktivitaetListFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAktivitaetListFormat) SetTo(v GetAktivitaetListFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAktivitaetListFormat) Get() (v GetAktivitaetListFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAktivitaetListFormat) Or(d GetAktivitaetListFormat) GetAktivitaetListFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDrucksacheFormat returns new OptGetDrucksacheFormat with value set to v.
func NewOptGetDrucksacheFormat(v GetDrucksacheFormat) OptGetDrucksacheFormat {
	return OptGetDrucksacheFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetDrucksacheFormat is optional GetDrucksacheFormat.
type OptGetDrucksacheFormat struct {
	Value GetDrucksacheFormat
	Set   bool
}

// IsSet returns true if OptGetDrucksacheFormat was set.
func (o OptGetDrucksacheFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDrucksacheFormat) Reset() {
	var v GetDrucksacheFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDrucksacheFormat) SetTo(v GetDrucksacheFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDrucksacheFormat) Get() (v GetDrucksacheFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDrucksacheFormat) Or(d GetDrucksacheFormat) GetDrucksacheFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDrucksacheListFormat returns new OptGetDrucksacheListFormat with value set to v.
func NewOptGetDrucksacheListFormat(v GetDrucksacheListFormat) OptGetDrucksacheListFormat {
	return OptGetDrucksacheListFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetDrucksacheListFormat is optional GetDrucksacheListFormat.
type OptGetDrucksacheListFormat struct {
	Value GetDrucksacheListFormat
	Set   bool
}

// IsSet returns true if OptGetDrucksacheListFormat was set.
func (o OptGetDrucksacheListFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDrucksacheListFormat) Reset() {
	var v GetDrucksacheListFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDrucksacheListFormat) SetTo(v GetDrucksacheListFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDrucksacheListFormat) Get() (v GetDrucksacheListFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDrucksacheListFormat) Or(d GetDrucksacheListFormat) GetDrucksacheListFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDrucksacheTextFormat returns new OptGetDrucksacheTextFormat with value set to v.
func NewOptGetDrucksacheTextFormat(v GetDrucksacheTextFormat) OptGetDrucksacheTextFormat {
	return OptGetDrucksacheTextFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetDrucksacheTextFormat is optional GetDrucksacheTextFormat.
type OptGetDrucksacheTextFormat struct {
	Value GetDrucksacheTextFormat
	Set   bool
}

// IsSet returns true if OptGetDrucksacheTextFormat was set.
func (o OptGetDrucksacheTextFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDrucksacheTextFormat) Reset() {
	var v GetDrucksacheTextFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDrucksacheTextFormat) SetTo(v GetDrucksacheTextFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDrucksacheTextFormat) Get() (v GetDrucksacheTextFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDrucksacheTextFormat) Or(d GetDrucksacheTextFormat) GetDrucksacheTextFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDrucksacheTextListFormat returns new OptGetDrucksacheTextListFormat with value set to v.
func NewOptGetDrucksacheTextListFormat(v GetDrucksacheTextListFormat) OptGetDrucksacheTextListFormat {
	return OptGetDrucksacheTextListFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetDrucksacheTextListFormat is optional GetDrucksacheTextListFormat.
type OptGetDrucksacheTextListFormat struct {
	Value GetDrucksacheTextListFormat
	Set   bool
}

// IsSet returns true if OptGetDrucksacheTextListFormat was set.
func (o OptGetDrucksacheTextListFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDrucksacheTextListFormat) Reset() {
	var v GetDrucksacheTextListFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDrucksacheTextListFormat) SetTo(v GetDrucksacheTextListFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDrucksacheTextListFormat) Get() (v GetDrucksacheTextListFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDrucksacheTextListFormat) Or(d GetDrucksacheTextListFormat) GetDrucksacheTextListFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPersonFormat returns new OptGetPersonFormat with value set to v.
func NewOptGetPersonFormat(v GetPersonFormat) OptGetPersonFormat {
	return OptGetPersonFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetPersonFormat is optional GetPersonFormat.
type OptGetPersonFormat struct {
	Value GetPersonFormat
	Set   bool
}

// IsSet returns true if OptGetPersonFormat was set.
func (o OptGetPersonFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPersonFormat) Reset() {
	var v GetPersonFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPersonFormat) SetTo(v GetPersonFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPersonFormat) Get() (v GetPersonFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPersonFormat) Or(d GetPersonFormat) GetPersonFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPersonListFormat returns new OptGetPersonListFormat with value set to v.
func NewOptGetPersonListFormat(v GetPersonListFormat) OptGetPersonListFormat {
	return OptGetPersonListFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetPersonListFormat is optional GetPersonListFormat.
type OptGetPersonListFormat struct {
	Value GetPersonListFormat
	Set   bool
}

// IsSet returns true if OptGetPersonListFormat was set.
func (o OptGetPersonListFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPersonListFormat) Reset() {
	var v GetPersonListFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPersonListFormat) SetTo(v GetPersonListFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPersonListFormat) Get() (v GetPersonListFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPersonListFormat) Or(d GetPersonListFormat) GetPersonListFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPlenarprotokollFormat returns new OptGetPlenarprotokollFormat with value set to v.
func NewOptGetPlenarprotokollFormat(v GetPlenarprotokollFormat) OptGetPlenarprotokollFormat {
	return OptGetPlenarprotokollFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetPlenarprotokollFormat is optional GetPlenarprotokollFormat.
type OptGetPlenarprotokollFormat struct {
	Value GetPlenarprotokollFormat
	Set   bool
}

// IsSet returns true if OptGetPlenarprotokollFormat was set.
func (o OptGetPlenarprotokollFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPlenarprotokollFormat) Reset() {
	var v GetPlenarprotokollFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPlenarprotokollFormat) SetTo(v GetPlenarprotokollFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPlenarprotokollFormat) Get() (v GetPlenarprotokollFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPlenarprotokollFormat) Or(d GetPlenarprotokollFormat) GetPlenarprotokollFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPlenarprotokollListFormat returns new OptGetPlenarprotokollListFormat with value set to v.
func NewOptGetPlenarprotokollListFormat(v GetPlenarprotokollListFormat) OptGetPlenarprotokollListFormat {
	return OptGetPlenarprotokollListFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetPlenarprotokollListFormat is optional GetPlenarprotokollListFormat.
type OptGetPlenarprotokollListFormat struct {
	Value GetPlenarprotokollListFormat
	Set   bool
}

// IsSet returns true if OptGetPlenarprotokollListFormat was set.
func (o OptGetPlenarprotokollListFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPlenarprotokollListFormat) Reset() {
	var v GetPlenarprotokollListFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPlenarprotokollListFormat) SetTo(v GetPlenarprotokollListFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPlenarprotokollListFormat) Get() (v GetPlenarprotokollListFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPlenarprotokollListFormat) Or(d GetPlenarprotokollListFormat) GetPlenarprotokollListFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPlenarprotokollTextFormat returns new OptGetPlenarprotokollTextFormat with value set to v.
func NewOptGetPlenarprotokollTextFormat(v GetPlenarprotokollTextFormat) OptGetPlenarprotokollTextFormat {
	return OptGetPlenarprotokollTextFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetPlenarprotokollTextFormat is optional GetPlenarprotokollTextFormat.
type OptGetPlenarprotokollTextFormat struct {
	Value GetPlenarprotokollTextFormat
	Set   bool
}

// IsSet returns true if OptGetPlenarprotokollTextFormat was set.
func (o OptGetPlenarprotokollTextFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPlenarprotokollTextFormat) Reset() {
	var v GetPlenarprotokollTextFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPlenarprotokollTextFormat) SetTo(v GetPlenarprotokollTextFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPlenarprotokollTextFormat) Get() (v GetPlenarprotokollTextFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPlenarprotokollTextFormat) Or(d GetPlenarprotokollTextFormat) GetPlenarprotokollTextFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPlenarprotokollTextListFormat returns new OptGetPlenarprotokollTextListFormat with value set to v.
func NewOptGetPlenarprotokollTextListFormat(v GetPlenarprotokollTextListFormat) OptGetPlenarprotokollTextListFormat {
	return OptGetPlenarprotokollTextListFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetPlenarprotokollTextListFormat is optional GetPlenarprotokollTextListFormat.
type OptGetPlenarprotokollTextListFormat struct {
	Value GetPlenarprotokollTextListFormat
	Set   bool
}

// IsSet returns true if OptGetPlenarprotokollTextListFormat was set.
func (o OptGetPlenarprotokollTextListFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPlenarprotokollTextListFormat) Reset() {
	var v GetPlenarprotokollTextListFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPlenarprotokollTextListFormat) SetTo(v GetPlenarprotokollTextListFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPlenarprotokollTextListFormat) Get() (v GetPlenarprotokollTextListFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPlenarprotokollTextListFormat) Or(d GetPlenarprotokollTextListFormat) GetPlenarprotokollTextListFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetVorgangFormat returns new OptGetVorgangFormat with value set to v.
func NewOptGetVorgangFormat(v GetVorgangFormat) OptGetVorgangFormat {
	return OptGetVorgangFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetVorgangFormat is optional GetVorgangFormat.
type OptGetVorgangFormat struct {
	Value GetVorgangFormat
	Set   bool
}

// IsSet returns true if OptGetVorgangFormat was set.
func (o OptGetVorgangFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetVorgangFormat) Reset() {
	var v GetVorgangFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetVorgangFormat) SetTo(v GetVorgangFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetVorgangFormat) Get() (v GetVorgangFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetVorgangFormat) Or(d GetVorgangFormat) GetVorgangFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetVorgangListFDokumentart returns new OptGetVorgangListFDokumentart with value set to v.
func NewOptGetVorgangListFDokumentart(v GetVorgangListFDokumentart) OptGetVorgangListFDokumentart {
	return OptGetVorgangListFDokumentart{
		Value: v,
		Set:   true,
	}
}

// OptGetVorgangListFDokumentart is optional GetVorgangListFDokumentart.
type OptGetVorgangListFDokumentart struct {
	Value GetVorgangListFDokumentart
	Set   bool
}

// IsSet returns true if OptGetVorgangListFDokumentart was set.
func (o OptGetVorgangListFDokumentart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetVorgangListFDokumentart) Reset() {
	var v GetVorgangListFDokumentart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetVorgangListFDokumentart) SetTo(v GetVorgangListFDokumentart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetVorgangListFDokumentart) Get() (v GetVorgangListFDokumentart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetVorgangListFDokumentart) Or(d GetVorgangListFDokumentart) GetVorgangListFDokumentart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetVorgangListFormat returns new OptGetVorgangListFormat with value set to v.
func NewOptGetVorgangListFormat(v GetVorgangListFormat) OptGetVorgangListFormat {
	return OptGetVorgangListFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetVorgangListFormat is optional GetVorgangListFormat.
type OptGetVorgangListFormat struct {
	Value GetVorgangListFormat
	Set   bool
}

// IsSet returns true if OptGetVorgangListFormat was set.
func (o OptGetVorgangListFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetVorgangListFormat) Reset() {
	var v GetVorgangListFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetVorgangListFormat) SetTo(v GetVorgangListFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetVorgangListFormat) Get() (v GetVorgangListFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetVorgangListFormat) Or(d GetVorgangListFormat) GetVorgangListFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetVorgangspositionFormat returns new OptGetVorgangspositionFormat with value set to v.
func NewOptGetVorgangspositionFormat(v GetVorgangspositionFormat) OptGetVorgangspositionFormat {
	return OptGetVorgangspositionFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetVorgangspositionFormat is optional GetVorgangspositionFormat.
type OptGetVorgangspositionFormat struct {
	Value GetVorgangspositionFormat
	Set   bool
}

// IsSet returns true if OptGetVorgangspositionFormat was set.
func (o OptGetVorgangspositionFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetVorgangspositionFormat) Reset() {
	var v GetVorgangspositionFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetVorgangspositionFormat) SetTo(v GetVorgangspositionFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetVorgangspositionFormat) Get() (v GetVorgangspositionFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetVorgangspositionFormat) Or(d GetVorgangspositionFormat) GetVorgangspositionFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetVorgangspositionListFDokumentart returns new OptGetVorgangspositionListFDokumentart with value set to v.
func NewOptGetVorgangspositionListFDokumentart(v GetVorgangspositionListFDokumentart) OptGetVorgangspositionListFDokumentart {
	return OptGetVorgangspositionListFDokumentart{
		Value: v,
		Set:   true,
	}
}

// OptGetVorgangspositionListFDokumentart is optional GetVorgangspositionListFDokumentart.
type OptGetVorgangspositionListFDokumentart struct {
	Value GetVorgangspositionListFDokumentart
	Set   bool
}

// IsSet returns true if OptGetVorgangspositionListFDokumentart was set.
func (o OptGetVorgangspositionListFDokumentart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetVorgangspositionListFDokumentart) Reset() {
	var v GetVorgangspositionListFDokumentart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetVorgangspositionListFDokumentart) SetTo(v GetVorgangspositionListFDokumentart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetVorgangspositionListFDokumentart) Get() (v GetVorgangspositionListFDokumentart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetVorgangspositionListFDokumentart) Or(d GetVorgangspositionListFDokumentart) GetVorgangspositionListFDokumentart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetVorgangspositionListFormat returns new OptGetVorgangspositionListFormat with value set to v.
func NewOptGetVorgangspositionListFormat(v GetVorgangspositionListFormat) OptGetVorgangspositionListFormat {
	return OptGetVorgangspositionListFormat{
		Value: v,
		Set:   true,
	}
}

// OptGetVorgangspositionListFormat is optional GetVorgangspositionListFormat.
type OptGetVorgangspositionListFormat struct {
	Value GetVorgangspositionListFormat
	Set   bool
}

// IsSet returns true if OptGetVorgangspositionListFormat was set.
func (o OptGetVorgangspositionListFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetVorgangspositionListFormat) Reset() {
	var v GetVorgangspositionListFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetVorgangspositionListFormat) SetTo(v GetVorgangspositionListFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetVorgangspositionListFormat) Get() (v GetVorgangspositionListFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetVorgangspositionListFormat) Or(d GetVorgangspositionListFormat) GetVorgangspositionListFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptQuadrant returns new OptQuadrant with value set to v.
func NewOptQuadrant(v Quadrant) OptQuadrant {
	return OptQuadrant{
		Value: v,
		Set:   true,
	}
}

// OptQuadrant is optional Quadrant.
type OptQuadrant struct {
	Value Quadrant
	Set   bool
}

// IsSet returns true if OptQuadrant was set.
func (o OptQuadrant) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptQuadrant) Reset() {
	var v Quadrant
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptQuadrant) SetTo(v Quadrant) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptQuadrant) Get() (v Quadrant, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptQuadrant) Or(d Quadrant) Quadrant {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUrheberRolle returns new OptUrheberRolle with value set to v.
func NewOptUrheberRolle(v UrheberRolle) OptUrheberRolle {
	return OptUrheberRolle{
		Value: v,
		Set:   true,
	}
}

// OptUrheberRolle is optional UrheberRolle.
type OptUrheberRolle struct {
	Value UrheberRolle
	Set   bool
}

// IsSet returns true if OptUrheberRolle was set.
func (o OptUrheberRolle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUrheberRolle) Reset() {
	var v UrheberRolle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUrheberRolle) SetTo(v UrheberRolle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUrheberRolle) Get() (v UrheberRolle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUrheberRolle) Or(d UrheberRolle) UrheberRolle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptZuordnung returns new OptZuordnung with value set to v.
func NewOptZuordnung(v Zuordnung) OptZuordnung {
	return OptZuordnung{
		Value: v,
		Set:   true,
	}
}

// OptZuordnung is optional Zuordnung.
type OptZuordnung struct {
	Value Zuordnung
	Set   bool
}

// IsSet returns true if OptZuordnung was set.
func (o OptZuordnung) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptZuordnung) Reset() {
	var v Zuordnung
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptZuordnung) SetTo(v Zuordnung) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptZuordnung) Get() (v Zuordnung, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptZuordnung) Or(d Zuordnung) Zuordnung {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Liefert Personenstammdaten zu einer Person.
// Ref: #/components/schemas/Person
type Person struct {
	ID           string    `json:"id"`
	Nachname     string    `json:"nachname"`
	Vorname      string    `json:"vorname"`
	Namenszusatz OptString `json:"namenszusatz"`
	Typ          string    `json:"typ"`
	// Wahlperiode des ersten zugehörigen Dokuments.
	Wahlperiode OptInt32 `json:"wahlperiode"`
	// Datum des ersten zugehörigen Dokuments.
	Basisdatum OptDate `json:"basisdatum"`
	// Datum des letzten zugehörigen Dokuments.
	Datum OptDate `json:"datum"`
	// Letzte Aktualisierung der Entität.
	Aktualisiert time.Time `json:"aktualisiert"`
	Titel        string    `json:"titel"`
	// Nebeneinträge mit bspw. abweichenden Funktionen oder Namensänderungen.
	PersonRoles []PersonRole `json:"person_roles"`
}

// GetID returns the value of ID.
func (s *Person) GetID() string {
	return s.ID
}

// GetNachname returns the value of Nachname.
func (s *Person) GetNachname() string {
	return s.Nachname
}

// GetVorname returns the value of Vorname.
func (s *Person) GetVorname() string {
	return s.Vorname
}

// GetNamenszusatz returns the value of Namenszusatz.
func (s *Person) GetNamenszusatz() OptString {
	return s.Namenszusatz
}

// GetTyp returns the value of Typ.
func (s *Person) GetTyp() string {
	return s.Typ
}

// GetWahlperiode returns the value of Wahlperiode.
func (s *Person) GetWahlperiode() OptInt32 {
	return s.Wahlperiode
}

// GetBasisdatum returns the value of Basisdatum.
func (s *Person) GetBasisdatum() OptDate {
	return s.Basisdatum
}

// GetDatum returns the value of Datum.
func (s *Person) GetDatum() OptDate {
	return s.Datum
}

// GetAktualisiert returns the value of Aktualisiert.
func (s *Person) GetAktualisiert() time.Time {
	return s.Aktualisiert
}

// GetTitel returns the value of Titel.
func (s *Person) GetTitel() string {
	return s.Titel
}

// GetPersonRoles returns the value of PersonRoles.
func (s *Person) GetPersonRoles() []PersonRole {
	return s.PersonRoles
}

// SetID sets the value of ID.
func (s *Person) SetID(val string) {
	s.ID = val
}

// SetNachname sets the value of Nachname.
func (s *Person) SetNachname(val string) {
	s.Nachname = val
}

// SetVorname sets the value of Vorname.
func (s *Person) SetVorname(val string) {
	s.Vorname = val
}

// SetNamenszusatz sets the value of Namenszusatz.
func (s *Person) SetNamenszusatz(val OptString) {
	s.Namenszusatz = val
}

// SetTyp sets the value of Typ.
func (s *Person) SetTyp(val string) {
	s.Typ = val
}

// SetWahlperiode sets the value of Wahlperiode.
func (s *Person) SetWahlperiode(val OptInt32) {
	s.Wahlperiode = val
}

// SetBasisdatum sets the value of Basisdatum.
func (s *Person) SetBasisdatum(val OptDate) {
	s.Basisdatum = val
}

// SetDatum sets the value of Datum.
func (s *Person) SetDatum(val OptDate) {
	s.Datum = val
}

// SetAktualisiert sets the value of Aktualisiert.
func (s *Person) SetAktualisiert(val time.Time) {
	s.Aktualisiert = val
}

// SetTitel sets the value of Titel.
func (s *Person) SetTitel(val string) {
	s.Titel = val
}

// SetPersonRoles sets the value of PersonRoles.
func (s *Person) SetPersonRoles(val []PersonRole) {
	s.PersonRoles = val
}

func (*Person) getPersonRes() {}

// Merged schema.
// Ref: #/components/schemas/PersonListResponse
type PersonListResponse struct {
	NumFound  int32    `json:"numFound"`
	Cursor    string   `json:"cursor"`
	Documents []Person `json:"documents"`
}

// GetNumFound returns the value of NumFound.
func (s *PersonListResponse) GetNumFound() int32 {
	return s.NumFound
}

// GetCursor returns the value of Cursor.
func (s *PersonListResponse) GetCursor() string {
	return s.Cursor
}

// GetDocuments returns the value of Documents.
func (s *PersonListResponse) GetDocuments() []Person {
	return s.Documents
}

// SetNumFound sets the value of NumFound.
func (s *PersonListResponse) SetNumFound(val int32) {
	s.NumFound = val
}

// SetCursor sets the value of Cursor.
func (s *PersonListResponse) SetCursor(val string) {
	s.Cursor = val
}

// SetDocuments sets the value of Documents.
func (s *PersonListResponse) SetDocuments(val []Person) {
	s.Documents = val
}

func (*PersonListResponse) getPersonListRes() {}

// Liefert den Eintrag einer Person in einer bestimmten Rolle oder Funktion.
// Ref: #/components/schemas/PersonRole
type PersonRole struct {
	Funktion        string    `json:"funktion"`
	Funktionszusatz OptString `json:"funktionszusatz"`
	Fraktion        OptString `json:"fraktion"`
	Nachname        string    `json:"nachname"`
	Vorname         string    `json:"vorname"`
	Namenszusatz    OptString `json:"namenszusatz"`
	// Wahlperioden, für die der Personeneintrag zutrifft.
	WahlperiodeNummer []int32       `json:"wahlperiode_nummer"`
	Wahlkreiszusatz   OptString     `json:"wahlkreiszusatz"`
	RessortTitel      OptString     `json:"ressort_titel"`
	Bundesland        OptBundesland `json:"bundesland"`
}

// GetFunktion returns the value of Funktion.
func (s *PersonRole) GetFunktion() string {
	return s.Funktion
}

// GetFunktionszusatz returns the value of Funktionszusatz.
func (s *PersonRole) GetFunktionszusatz() OptString {
	return s.Funktionszusatz
}

// GetFraktion returns the value of Fraktion.
func (s *PersonRole) GetFraktion() OptString {
	return s.Fraktion
}

// GetNachname returns the value of Nachname.
func (s *PersonRole) GetNachname() string {
	return s.Nachname
}

// GetVorname returns the value of Vorname.
func (s *PersonRole) GetVorname() string {
	return s.Vorname
}

// GetNamenszusatz returns the value of Namenszusatz.
func (s *PersonRole) GetNamenszusatz() OptString {
	return s.Namenszusatz
}

// GetWahlperiodeNummer returns the value of WahlperiodeNummer.
func (s *PersonRole) GetWahlperiodeNummer() []int32 {
	return s.WahlperiodeNummer
}

// GetWahlkreiszusatz returns the value of Wahlkreiszusatz.
func (s *PersonRole) GetWahlkreiszusatz() OptString {
	return s.Wahlkreiszusatz
}

// GetRessortTitel returns the value of RessortTitel.
func (s *PersonRole) GetRessortTitel() OptString {
	return s.RessortTitel
}

// GetBundesland returns the value of Bundesland.
func (s *PersonRole) GetBundesland() OptBundesland {
	return s.Bundesland
}

// SetFunktion sets the value of Funktion.
func (s *PersonRole) SetFunktion(val string) {
	s.Funktion = val
}

// SetFunktionszusatz sets the value of Funktionszusatz.
func (s *PersonRole) SetFunktionszusatz(val OptString) {
	s.Funktionszusatz = val
}

// SetFraktion sets the value of Fraktion.
func (s *PersonRole) SetFraktion(val OptString) {
	s.Fraktion = val
}

// SetNachname sets the value of Nachname.
func (s *PersonRole) SetNachname(val string) {
	s.Nachname = val
}

// SetVorname sets the value of Vorname.
func (s *PersonRole) SetVorname(val string) {
	s.Vorname = val
}

// SetNamenszusatz sets the value of Namenszusatz.
func (s *PersonRole) SetNamenszusatz(val OptString) {
	s.Namenszusatz = val
}

// SetWahlperiodeNummer sets the value of WahlperiodeNummer.
func (s *PersonRole) SetWahlperiodeNummer(val []int32) {
	s.WahlperiodeNummer = val
}

// SetWahlkreiszusatz sets the value of Wahlkreiszusatz.
func (s *PersonRole) SetWahlkreiszusatz(val OptString) {
	s.Wahlkreiszusatz = val
}

// SetRessortTitel sets the value of RessortTitel.
func (s *PersonRole) SetRessortTitel(val OptString) {
	s.RessortTitel = val
}

// SetBundesland sets the value of Bundesland.
func (s *PersonRole) SetBundesland(val OptBundesland) {
	s.Bundesland = val
}

// Liefert Metadaten zu einem Plenarprotokoll.
// Ref: #/components/schemas/Plenarprotokoll
type Plenarprotokoll struct {
	ID             string                     `json:"id"`
	Dokumentart    PlenarprotokollDokumentart `json:"dokumentart"`
	Typ            PlenarprotokollTyp         `json:"typ"`
	Dokumentnummer string                     `json:"dokumentnummer"`
	Wahlperiode    OptInt32                   `json:"wahlperiode"`
	Herausgeber    Zuordnung                  `json:"herausgeber"`
	Datum          time.Time                  `json:"datum"`
	// Letzte Aktualisierung der Entität.
	Aktualisiert time.Time  `json:"aktualisiert"`
	Titel        string     `json:"titel"`
	Fundstelle   Fundstelle `json:"fundstelle"`
	// MD5-Prüfsumme der PDF-Datei.
	PdfHash OptString `json:"pdf_hash"`
	// Zusammenfassung der ersten 4 zugehörigen Vorgänge.
	Vorgangsbezug []Vorgangsbezug `json:"vorgangsbezug"`
	// Gesamtzahl der zugehörigen Vorgänge.
	VorgangsbezugAnzahl int32     `json:"vorgangsbezug_anzahl"`
	Sitzungsbemerkung   OptString `json:"sitzungsbemerkung"`
}

// GetID returns the value of ID.
func (s *Plenarprotokoll) GetID() string {
	return s.ID
}

// GetDokumentart returns the value of Dokumentart.
func (s *Plenarprotokoll) GetDokumentart() PlenarprotokollDokumentart {
	return s.Dokumentart
}

// GetTyp returns the value of Typ.
func (s *Plenarprotokoll) GetTyp() PlenarprotokollTyp {
	return s.Typ
}

// GetDokumentnummer returns the value of Dokumentnummer.
func (s *Plenarprotokoll) GetDokumentnummer() string {
	return s.Dokumentnummer
}

// GetWahlperiode returns the value of Wahlperiode.
func (s *Plenarprotokoll) GetWahlperiode() OptInt32 {
	return s.Wahlperiode
}

// GetHerausgeber returns the value of Herausgeber.
func (s *Plenarprotokoll) GetHerausgeber() Zuordnung {
	return s.Herausgeber
}

// GetDatum returns the value of Datum.
func (s *Plenarprotokoll) GetDatum() time.Time {
	return s.Datum
}

// GetAktualisiert returns the value of Aktualisiert.
func (s *Plenarprotokoll) GetAktualisiert() time.Time {
	return s.Aktualisiert
}

// GetTitel returns the value of Titel.
func (s *Plenarprotokoll) GetTitel() string {
	return s.Titel
}

// GetFundstelle returns the value of Fundstelle.
func (s *Plenarprotokoll) GetFundstelle() Fundstelle {
	return s.Fundstelle
}

// GetPdfHash returns the value of PdfHash.
func (s *Plenarprotokoll) GetPdfHash() OptString {
	return s.PdfHash
}

// GetVorgangsbezug returns the value of Vorgangsbezug.
func (s *Plenarprotokoll) GetVorgangsbezug() []Vorgangsbezug {
	return s.Vorgangsbezug
}

// GetVorgangsbezugAnzahl returns the value of VorgangsbezugAnzahl.
func (s *Plenarprotokoll) GetVorgangsbezugAnzahl() int32 {
	return s.VorgangsbezugAnzahl
}

// GetSitzungsbemerkung returns the value of Sitzungsbemerkung.
func (s *Plenarprotokoll) GetSitzungsbemerkung() OptString {
	return s.Sitzungsbemerkung
}

// SetID sets the value of ID.
func (s *Plenarprotokoll) SetID(val string) {
	s.ID = val
}

// SetDokumentart sets the value of Dokumentart.
func (s *Plenarprotokoll) SetDokumentart(val PlenarprotokollDokumentart) {
	s.Dokumentart = val
}

// SetTyp sets the value of Typ.
func (s *Plenarprotokoll) SetTyp(val PlenarprotokollTyp) {
	s.Typ = val
}

// SetDokumentnummer sets the value of Dokumentnummer.
func (s *Plenarprotokoll) SetDokumentnummer(val string) {
	s.Dokumentnummer = val
}

// SetWahlperiode sets the value of Wahlperiode.
func (s *Plenarprotokoll) SetWahlperiode(val OptInt32) {
	s.Wahlperiode = val
}

// SetHerausgeber sets the value of Herausgeber.
func (s *Plenarprotokoll) SetHerausgeber(val Zuordnung) {
	s.Herausgeber = val
}

// SetDatum sets the value of Datum.
func (s *Plenarprotokoll) SetDatum(val time.Time) {
	s.Datum = val
}

// SetAktualisiert sets the value of Aktualisiert.
func (s *Plenarprotokoll) SetAktualisiert(val time.Time) {
	s.Aktualisiert = val
}

// SetTitel sets the value of Titel.
func (s *Plenarprotokoll) SetTitel(val string) {
	s.Titel = val
}

// SetFundstelle sets the value of Fundstelle.
func (s *Plenarprotokoll) SetFundstelle(val Fundstelle) {
	s.Fundstelle = val
}

// SetPdfHash sets the value of PdfHash.
func (s *Plenarprotokoll) SetPdfHash(val OptString) {
	s.PdfHash = val
}

// SetVorgangsbezug sets the value of Vorgangsbezug.
func (s *Plenarprotokoll) SetVorgangsbezug(val []Vorgangsbezug) {
	s.Vorgangsbezug = val
}

// SetVorgangsbezugAnzahl sets the value of VorgangsbezugAnzahl.
func (s *Plenarprotokoll) SetVorgangsbezugAnzahl(val int32) {
	s.VorgangsbezugAnzahl = val
}

// SetSitzungsbemerkung sets the value of Sitzungsbemerkung.
func (s *Plenarprotokoll) SetSitzungsbemerkung(val OptString) {
	s.Sitzungsbemerkung = val
}

func (*Plenarprotokoll) getPlenarprotokollRes() {}

type PlenarprotokollDokumentart string

const (
	PlenarprotokollDokumentartPlenarprotokoll PlenarprotokollDokumentart = "Plenarprotokoll"
)

// AllValues returns all PlenarprotokollDokumentart values.
func (PlenarprotokollDokumentart) AllValues() []PlenarprotokollDokumentart {
	return []PlenarprotokollDokumentart{
		PlenarprotokollDokumentartPlenarprotokoll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlenarprotokollDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case PlenarprotokollDokumentartPlenarprotokoll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlenarprotokollDokumentart) UnmarshalText(data []byte) error {
	switch PlenarprotokollDokumentart(data) {
	case PlenarprotokollDokumentartPlenarprotokoll:
		*s = PlenarprotokollDokumentartPlenarprotokoll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PlenarprotokollListResponse
type PlenarprotokollListResponse struct {
	NumFound  int32             `json:"numFound"`
	Cursor    string            `json:"cursor"`
	Documents []Plenarprotokoll `json:"documents"`
}

// GetNumFound returns the value of NumFound.
func (s *PlenarprotokollListResponse) GetNumFound() int32 {
	return s.NumFound
}

// GetCursor returns the value of Cursor.
func (s *PlenarprotokollListResponse) GetCursor() string {
	return s.Cursor
}

// GetDocuments returns the value of Documents.
func (s *PlenarprotokollListResponse) GetDocuments() []Plenarprotokoll {
	return s.Documents
}

// SetNumFound sets the value of NumFound.
func (s *PlenarprotokollListResponse) SetNumFound(val int32) {
	s.NumFound = val
}

// SetCursor sets the value of Cursor.
func (s *PlenarprotokollListResponse) SetCursor(val string) {
	s.Cursor = val
}

// SetDocuments sets the value of Documents.
func (s *PlenarprotokollListResponse) SetDocuments(val []Plenarprotokoll) {
	s.Documents = val
}

func (*PlenarprotokollListResponse) getPlenarprotokollListRes() {}

// Merged schema.
// Ref: #/components/schemas/PlenarprotokollText
type PlenarprotokollText struct {
	ID             string                         `json:"id"`
	Dokumentart    PlenarprotokollTextDokumentart `json:"dokumentart"`
	Typ            PlenarprotokollTextTyp         `json:"typ"`
	Dokumentnummer string                         `json:"dokumentnummer"`
	Wahlperiode    OptInt32                       `json:"wahlperiode"`
	Herausgeber    Zuordnung                      `json:"herausgeber"`
	Datum          time.Time                      `json:"datum"`
	// Letzte Aktualisierung der Entität.
	Aktualisiert time.Time  `json:"aktualisiert"`
	Titel        string     `json:"titel"`
	Fundstelle   Fundstelle `json:"fundstelle"`
	// MD5-Prüfsumme der PDF-Datei.
	PdfHash OptString `json:"pdf_hash"`
	// Zusammenfassung der ersten 4 zugehörigen Vorgänge.
	Vorgangsbezug []Vorgangsbezug `json:"vorgangsbezug"`
	// Gesamtzahl der zugehörigen Vorgänge.
	VorgangsbezugAnzahl int32     `json:"vorgangsbezug_anzahl"`
	Sitzungsbemerkung   OptString `json:"sitzungsbemerkung"`
	// Volltext des Dokuments
	// Das Beispiel enthält einen gekürzten Auszug einer Drucksache.
	Text OptString `json:"text"`
}

// GetID returns the value of ID.
func (s *PlenarprotokollText) GetID() string {
	return s.ID
}

// GetDokumentart returns the value of Dokumentart.
func (s *PlenarprotokollText) GetDokumentart() PlenarprotokollTextDokumentart {
	return s.Dokumentart
}

// GetTyp returns the value of Typ.
func (s *PlenarprotokollText) GetTyp() PlenarprotokollTextTyp {
	return s.Typ
}

// GetDokumentnummer returns the value of Dokumentnummer.
func (s *PlenarprotokollText) GetDokumentnummer() string {
	return s.Dokumentnummer
}

// GetWahlperiode returns the value of Wahlperiode.
func (s *PlenarprotokollText) GetWahlperiode() OptInt32 {
	return s.Wahlperiode
}

// GetHerausgeber returns the value of Herausgeber.
func (s *PlenarprotokollText) GetHerausgeber() Zuordnung {
	return s.Herausgeber
}

// GetDatum returns the value of Datum.
func (s *PlenarprotokollText) GetDatum() time.Time {
	return s.Datum
}

// GetAktualisiert returns the value of Aktualisiert.
func (s *PlenarprotokollText) GetAktualisiert() time.Time {
	return s.Aktualisiert
}

// GetTitel returns the value of Titel.
func (s *PlenarprotokollText) GetTitel() string {
	return s.Titel
}

// GetFundstelle returns the value of Fundstelle.
func (s *PlenarprotokollText) GetFundstelle() Fundstelle {
	return s.Fundstelle
}

// GetPdfHash returns the value of PdfHash.
func (s *PlenarprotokollText) GetPdfHash() OptString {
	return s.PdfHash
}

// GetVorgangsbezug returns the value of Vorgangsbezug.
func (s *PlenarprotokollText) GetVorgangsbezug() []Vorgangsbezug {
	return s.Vorgangsbezug
}

// GetVorgangsbezugAnzahl returns the value of VorgangsbezugAnzahl.
func (s *PlenarprotokollText) GetVorgangsbezugAnzahl() int32 {
	return s.VorgangsbezugAnzahl
}

// GetSitzungsbemerkung returns the value of Sitzungsbemerkung.
func (s *PlenarprotokollText) GetSitzungsbemerkung() OptString {
	return s.Sitzungsbemerkung
}

// GetText returns the value of Text.
func (s *PlenarprotokollText) GetText() OptString {
	return s.Text
}

// SetID sets the value of ID.
func (s *PlenarprotokollText) SetID(val string) {
	s.ID = val
}

// SetDokumentart sets the value of Dokumentart.
func (s *PlenarprotokollText) SetDokumentart(val PlenarprotokollTextDokumentart) {
	s.Dokumentart = val
}

// SetTyp sets the value of Typ.
func (s *PlenarprotokollText) SetTyp(val PlenarprotokollTextTyp) {
	s.Typ = val
}

// SetDokumentnummer sets the value of Dokumentnummer.
func (s *PlenarprotokollText) SetDokumentnummer(val string) {
	s.Dokumentnummer = val
}

// SetWahlperiode sets the value of Wahlperiode.
func (s *PlenarprotokollText) SetWahlperiode(val OptInt32) {
	s.Wahlperiode = val
}

// SetHerausgeber sets the value of Herausgeber.
func (s *PlenarprotokollText) SetHerausgeber(val Zuordnung) {
	s.Herausgeber = val
}

// SetDatum sets the value of Datum.
func (s *PlenarprotokollText) SetDatum(val time.Time) {
	s.Datum = val
}

// SetAktualisiert sets the value of Aktualisiert.
func (s *PlenarprotokollText) SetAktualisiert(val time.Time) {
	s.Aktualisiert = val
}

// SetTitel sets the value of Titel.
func (s *PlenarprotokollText) SetTitel(val string) {
	s.Titel = val
}

// SetFundstelle sets the value of Fundstelle.
func (s *PlenarprotokollText) SetFundstelle(val Fundstelle) {
	s.Fundstelle = val
}

// SetPdfHash sets the value of PdfHash.
func (s *PlenarprotokollText) SetPdfHash(val OptString) {
	s.PdfHash = val
}

// SetVorgangsbezug sets the value of Vorgangsbezug.
func (s *PlenarprotokollText) SetVorgangsbezug(val []Vorgangsbezug) {
	s.Vorgangsbezug = val
}

// SetVorgangsbezugAnzahl sets the value of VorgangsbezugAnzahl.
func (s *PlenarprotokollText) SetVorgangsbezugAnzahl(val int32) {
	s.VorgangsbezugAnzahl = val
}

// SetSitzungsbemerkung sets the value of Sitzungsbemerkung.
func (s *PlenarprotokollText) SetSitzungsbemerkung(val OptString) {
	s.Sitzungsbemerkung = val
}

// SetText sets the value of Text.
func (s *PlenarprotokollText) SetText(val OptString) {
	s.Text = val
}

func (*PlenarprotokollText) getPlenarprotokollTextRes() {}

type PlenarprotokollTextDokumentart string

const (
	PlenarprotokollTextDokumentartPlenarprotokoll PlenarprotokollTextDokumentart = "Plenarprotokoll"
)

// AllValues returns all PlenarprotokollTextDokumentart values.
func (PlenarprotokollTextDokumentart) AllValues() []PlenarprotokollTextDokumentart {
	return []PlenarprotokollTextDokumentart{
		PlenarprotokollTextDokumentartPlenarprotokoll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlenarprotokollTextDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case PlenarprotokollTextDokumentartPlenarprotokoll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlenarprotokollTextDokumentart) UnmarshalText(data []byte) error {
	switch PlenarprotokollTextDokumentart(data) {
	case PlenarprotokollTextDokumentartPlenarprotokoll:
		*s = PlenarprotokollTextDokumentartPlenarprotokoll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PlenarprotokollTextListResponse
type PlenarprotokollTextListResponse struct {
	NumFound  int32                 `json:"numFound"`
	Cursor    string                `json:"cursor"`
	Documents []PlenarprotokollText `json:"documents"`
}

// GetNumFound returns the value of NumFound.
func (s *PlenarprotokollTextListResponse) GetNumFound() int32 {
	return s.NumFound
}

// GetCursor returns the value of Cursor.
func (s *PlenarprotokollTextListResponse) GetCursor() string {
	return s.Cursor
}

// GetDocuments returns the value of Documents.
func (s *PlenarprotokollTextListResponse) GetDocuments() []PlenarprotokollText {
	return s.Documents
}

// SetNumFound sets the value of NumFound.
func (s *PlenarprotokollTextListResponse) SetNumFound(val int32) {
	s.NumFound = val
}

// SetCursor sets the value of Cursor.
func (s *PlenarprotokollTextListResponse) SetCursor(val string) {
	s.Cursor = val
}

// SetDocuments sets the value of Documents.
func (s *PlenarprotokollTextListResponse) SetDocuments(val []PlenarprotokollText) {
	s.Documents = val
}

func (*PlenarprotokollTextListResponse) getPlenarprotokollTextListRes() {}

type PlenarprotokollTextTyp string

const (
	PlenarprotokollTextTypDokument PlenarprotokollTextTyp = "Dokument"
)

// AllValues returns all PlenarprotokollTextTyp values.
func (PlenarprotokollTextTyp) AllValues() []PlenarprotokollTextTyp {
	return []PlenarprotokollTextTyp{
		PlenarprotokollTextTypDokument,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlenarprotokollTextTyp) MarshalText() ([]byte, error) {
	switch s {
	case PlenarprotokollTextTypDokument:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlenarprotokollTextTyp) UnmarshalText(data []byte) error {
	switch PlenarprotokollTextTyp(data) {
	case PlenarprotokollTextTypDokument:
		*s = PlenarprotokollTextTypDokument
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PlenarprotokollTyp string

const (
	PlenarprotokollTypDokument PlenarprotokollTyp = "Dokument"
)

// AllValues returns all PlenarprotokollTyp values.
func (PlenarprotokollTyp) AllValues() []PlenarprotokollTyp {
	return []PlenarprotokollTyp{
		PlenarprotokollTypDokument,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlenarprotokollTyp) MarshalText() ([]byte, error) {
	switch s {
	case PlenarprotokollTypDokument:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlenarprotokollTyp) UnmarshalText(data []byte) error {
	switch PlenarprotokollTyp(data) {
	case PlenarprotokollTypDokument:
		*s = PlenarprotokollTypDokument
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Teil der Fundstelle eines Plenarprotokolls. Jede Seite im Plenarprotokoll ist in vier gleich
// große Viertel unterteilt (Quadranten) mit den Bezeichnungen A, B, C, D.
// Ref: #/components/schemas/Quadrant
type Quadrant string

const (
	QuadrantA Quadrant = "A"
	QuadrantB Quadrant = "B"
	QuadrantC Quadrant = "C"
	QuadrantD Quadrant = "D"
)

// AllValues returns all Quadrant values.
func (Quadrant) AllValues() []Quadrant {
	return []Quadrant{
		QuadrantA,
		QuadrantB,
		QuadrantC,
		QuadrantD,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Quadrant) MarshalText() ([]byte, error) {
	switch s {
	case QuadrantA:
		return []byte(s), nil
	case QuadrantB:
		return []byte(s), nil
	case QuadrantC:
		return []byte(s), nil
	case QuadrantD:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Quadrant) UnmarshalText(data []byte) error {
	switch Quadrant(data) {
	case QuadrantA:
		*s = QuadrantA
		return nil
	case QuadrantB:
		*s = QuadrantB
		return nil
	case QuadrantC:
		*s = QuadrantC
		return nil
	case QuadrantD:
		*s = QuadrantD
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Liefert das Ressort (Bundesministerium), das innerhalb der Bundesregierung federführend für die
// Ausarbeitung z. B. eines Gesetzentwurfs oder eines Antrags oder die Beantwortung von Anfragen ist.
// Wird nur verwendet, wenn Urheber einer Drucksache die Bundesregierung ist.
// Das Ressort wird auch bei persönlichen Urhebern verwendet, um die Funktion von Angehörigen der
// Bundesregierung zu präzisieren, z. B. „Dr. Robert Habeck, Bundesmin., Bundesministerium für
// Wirtschaft und Klimaschutz“ oder „Dr. Florian Toncar, Parl. Staatssekr., Bundesministerium der
// Finanzen“.
// Ref: #/components/schemas/Ressort
type Ressort struct {
	Federfuehrend bool   `json:"federfuehrend"`
	Titel         string `json:"titel"`
}

// GetFederfuehrend returns the value of Federfuehrend.
func (s *Ressort) GetFederfuehrend() bool {
	return s.Federfuehrend
}

// GetTitel returns the value of Titel.
func (s *Ressort) GetTitel() string {
	return s.Titel
}

// SetFederfuehrend sets the value of Federfuehrend.
func (s *Ressort) SetFederfuehrend(val bool) {
	s.Federfuehrend = val
}

// SetTitel sets the value of Titel.
func (s *Ressort) SetTitel(val string) {
	s.Titel = val
}

// Liefert den Ausschuss bzw. die Ausschüsse, an die eine Drucksache überwiesen wurde, unter Angabe
// der Federführung und ggf. der Überweisungsart (z. B. „gemäß § 96 Geschäftsordnung BT“).
// Ref: #/components/schemas/Ueberweisung
type Ueberweisung struct {
	Ausschuss        string    `json:"ausschuss"`
	AusschussKuerzel string    `json:"ausschuss_kuerzel"`
	Federfuehrung    bool      `json:"federfuehrung"`
	Ueberweisungsart OptString `json:"ueberweisungsart"`
}

// GetAusschuss returns the value of Ausschuss.
func (s *Ueberweisung) GetAusschuss() string {
	return s.Ausschuss
}

// GetAusschussKuerzel returns the value of AusschussKuerzel.
func (s *Ueberweisung) GetAusschussKuerzel() string {
	return s.AusschussKuerzel
}

// GetFederfuehrung returns the value of Federfuehrung.
func (s *Ueberweisung) GetFederfuehrung() bool {
	return s.Federfuehrung
}

// GetUeberweisungsart returns the value of Ueberweisungsart.
func (s *Ueberweisung) GetUeberweisungsart() OptString {
	return s.Ueberweisungsart
}

// SetAusschuss sets the value of Ausschuss.
func (s *Ueberweisung) SetAusschuss(val string) {
	s.Ausschuss = val
}

// SetAusschussKuerzel sets the value of AusschussKuerzel.
func (s *Ueberweisung) SetAusschussKuerzel(val string) {
	s.AusschussKuerzel = val
}

// SetFederfuehrung sets the value of Federfuehrung.
func (s *Ueberweisung) SetFederfuehrung(val bool) {
	s.Federfuehrung = val
}

// SetUeberweisungsart sets the value of Ueberweisungsart.
func (s *Ueberweisung) SetUeberweisungsart(val OptString) {
	s.Ueberweisungsart = val
}

type UnauthorizedResponse struct {
	Code    UnauthorizedResponseCode    `json:"code"`
	Message UnauthorizedResponseMessage `json:"message"`
}

// GetCode returns the value of Code.
func (s *UnauthorizedResponse) GetCode() UnauthorizedResponseCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *UnauthorizedResponse) GetMessage() UnauthorizedResponseMessage {
	return s.Message
}

// SetCode sets the value of Code.
func (s *UnauthorizedResponse) SetCode(val UnauthorizedResponseCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *UnauthorizedResponse) SetMessage(val UnauthorizedResponseMessage) {
	s.Message = val
}

func (*UnauthorizedResponse) getAktivitaetListRes()          {}
func (*UnauthorizedResponse) getAktivitaetRes()              {}
func (*UnauthorizedResponse) getDrucksacheListRes()          {}
func (*UnauthorizedResponse) getDrucksacheRes()              {}
func (*UnauthorizedResponse) getDrucksacheTextListRes()      {}
func (*UnauthorizedResponse) getDrucksacheTextRes()          {}
func (*UnauthorizedResponse) getPersonListRes()              {}
func (*UnauthorizedResponse) getPersonRes()                  {}
func (*UnauthorizedResponse) getPlenarprotokollListRes()     {}
func (*UnauthorizedResponse) getPlenarprotokollRes()         {}
func (*UnauthorizedResponse) getPlenarprotokollTextListRes() {}
func (*UnauthorizedResponse) getPlenarprotokollTextRes()     {}
func (*UnauthorizedResponse) getVorgangListRes()             {}
func (*UnauthorizedResponse) getVorgangRes()                 {}
func (*UnauthorizedResponse) getVorgangspositionListRes()    {}
func (*UnauthorizedResponse) getVorgangspositionRes()        {}

type UnauthorizedResponseCode int

const (
	UnauthorizedResponseCode401 UnauthorizedResponseCode = 401
)

// AllValues returns all UnauthorizedResponseCode values.
func (UnauthorizedResponseCode) AllValues() []UnauthorizedResponseCode {
	return []UnauthorizedResponseCode{
		UnauthorizedResponseCode401,
	}
}

type UnauthorizedResponseMessage string

const (
	UnauthorizedResponseMessageAnAPIKeyIsRequiredToAccessThisServicePleaseReferToHTTPSDipBundestagDeBerDipHilfeAPIHowToApplyForAKeyMisuseOfThisServiceMayLeadToBlockingYourRequests UnauthorizedResponseMessage = "An API key is required to access this service. Please refer to https://dip.bundestag.de/über-dip/hilfe/api how to apply for a key. Misuse of this service may lead to blocking your requests."
)

// AllValues returns all UnauthorizedResponseMessage values.
func (UnauthorizedResponseMessage) AllValues() []UnauthorizedResponseMessage {
	return []UnauthorizedResponseMessage{
		UnauthorizedResponseMessageAnAPIKeyIsRequiredToAccessThisServicePleaseReferToHTTPSDipBundestagDeBerDipHilfeAPIHowToApplyForAKeyMisuseOfThisServiceMayLeadToBlockingYourRequests,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UnauthorizedResponseMessage) MarshalText() ([]byte, error) {
	switch s {
	case UnauthorizedResponseMessageAnAPIKeyIsRequiredToAccessThisServicePleaseReferToHTTPSDipBundestagDeBerDipHilfeAPIHowToApplyForAKeyMisuseOfThisServiceMayLeadToBlockingYourRequests:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UnauthorizedResponseMessage) UnmarshalText(data []byte) error {
	switch UnauthorizedResponseMessage(data) {
	case UnauthorizedResponseMessageAnAPIKeyIsRequiredToAccessThisServicePleaseReferToHTTPSDipBundestagDeBerDipHilfeAPIHowToApplyForAKeyMisuseOfThisServiceMayLeadToBlockingYourRequests:
		*s = UnauthorizedResponseMessageAnAPIKeyIsRequiredToAccessThisServicePleaseReferToHTTPSDipBundestagDeBerDipHilfeAPIHowToApplyForAKeyMisuseOfThisServiceMayLeadToBlockingYourRequests
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Liefert den körperschaftlichen Urheber einer Bundestags- oder Bundesratsdrucksache, z. B. einen
// Ausschuss, eine Fraktion, die Bundesregierung, ein Bundesland oder dergleichen.
// Ref: #/components/schemas/Urheber
type Urheber struct {
	Einbringer  OptBool         `json:"einbringer"`
	Bezeichnung string          `json:"bezeichnung"`
	Titel       string          `json:"titel"`
	Rolle       OptUrheberRolle `json:"rolle"`
}

// GetEinbringer returns the value of Einbringer.
func (s *Urheber) GetEinbringer() OptBool {
	return s.Einbringer
}

// GetBezeichnung returns the value of Bezeichnung.
func (s *Urheber) GetBezeichnung() string {
	return s.Bezeichnung
}

// GetTitel returns the value of Titel.
func (s *Urheber) GetTitel() string {
	return s.Titel
}

// GetRolle returns the value of Rolle.
func (s *Urheber) GetRolle() OptUrheberRolle {
	return s.Rolle
}

// SetEinbringer sets the value of Einbringer.
func (s *Urheber) SetEinbringer(val OptBool) {
	s.Einbringer = val
}

// SetBezeichnung sets the value of Bezeichnung.
func (s *Urheber) SetBezeichnung(val string) {
	s.Bezeichnung = val
}

// SetTitel sets the value of Titel.
func (s *Urheber) SetTitel(val string) {
	s.Titel = val
}

// SetRolle sets the value of Rolle.
func (s *Urheber) SetRolle(val OptUrheberRolle) {
	s.Rolle = val
}

type UrheberRolle string

const (
	UrheberRolleB UrheberRolle = "B"
	UrheberRolleU UrheberRolle = "U"
)

// AllValues returns all UrheberRolle values.
func (UrheberRolle) AllValues() []UrheberRolle {
	return []UrheberRolle{
		UrheberRolleB,
		UrheberRolleU,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UrheberRolle) MarshalText() ([]byte, error) {
	switch s {
	case UrheberRolleB:
		return []byte(s), nil
	case UrheberRolleU:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UrheberRolle) UnmarshalText(data []byte) error {
	switch UrheberRolle(data) {
	case UrheberRolleB:
		*s = UrheberRolleB
		return nil
	case UrheberRolleU:
		*s = UrheberRolleU
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Liefert die Angaben zur Verkündung eines Gesetzes: Ausfertigungs- und Verkündungsdatum sowie die
// Fundstelle im jeweiligen Verkündungsblatt. Bei Bundesgesetzblatt I und II ist die Fundstelle
// verlinkt.
// Ref: #/components/schemas/Verkuendung
type Verkuendung struct {
	Jahrgang                     string    `json:"jahrgang"`
	Heftnummer                   OptString `json:"heftnummer"`
	Seite                        string    `json:"seite"`
	Ausfertigungsdatum           time.Time `json:"ausfertigungsdatum"`
	Verkuendungsdatum            time.Time `json:"verkuendungsdatum"`
	RubrikNr                     OptString `json:"rubrik_nr"`
	Einleitungstext              string    `json:"einleitungstext"`
	VerkuendungsblattBezeichnung OptString `json:"verkuendungsblatt_bezeichnung"`
	VerkuendungsblattKuerzel     OptString `json:"verkuendungsblatt_kuerzel"`
	Fundstelle                   string    `json:"fundstelle"`
	PdfURL                       OptString `json:"pdf_url"`
	Titel                        OptString `json:"titel"`
}

// GetJahrgang returns the value of Jahrgang.
func (s *Verkuendung) GetJahrgang() string {
	return s.Jahrgang
}

// GetHeftnummer returns the value of Heftnummer.
func (s *Verkuendung) GetHeftnummer() OptString {
	return s.Heftnummer
}

// GetSeite returns the value of Seite.
func (s *Verkuendung) GetSeite() string {
	return s.Seite
}

// GetAusfertigungsdatum returns the value of Ausfertigungsdatum.
func (s *Verkuendung) GetAusfertigungsdatum() time.Time {
	return s.Ausfertigungsdatum
}

// GetVerkuendungsdatum returns the value of Verkuendungsdatum.
func (s *Verkuendung) GetVerkuendungsdatum() time.Time {
	return s.Verkuendungsdatum
}

// GetRubrikNr returns the value of RubrikNr.
func (s *Verkuendung) GetRubrikNr() OptString {
	return s.RubrikNr
}

// GetEinleitungstext returns the value of Einleitungstext.
func (s *Verkuendung) GetEinleitungstext() string {
	return s.Einleitungstext
}

// GetVerkuendungsblattBezeichnung returns the value of VerkuendungsblattBezeichnung.
func (s *Verkuendung) GetVerkuendungsblattBezeichnung() OptString {
	return s.VerkuendungsblattBezeichnung
}

// GetVerkuendungsblattKuerzel returns the value of VerkuendungsblattKuerzel.
func (s *Verkuendung) GetVerkuendungsblattKuerzel() OptString {
	return s.VerkuendungsblattKuerzel
}

// GetFundstelle returns the value of Fundstelle.
func (s *Verkuendung) GetFundstelle() string {
	return s.Fundstelle
}

// GetPdfURL returns the value of PdfURL.
func (s *Verkuendung) GetPdfURL() OptString {
	return s.PdfURL
}

// GetTitel returns the value of Titel.
func (s *Verkuendung) GetTitel() OptString {
	return s.Titel
}

// SetJahrgang sets the value of Jahrgang.
func (s *Verkuendung) SetJahrgang(val string) {
	s.Jahrgang = val
}

// SetHeftnummer sets the value of Heftnummer.
func (s *Verkuendung) SetHeftnummer(val OptString) {
	s.Heftnummer = val
}

// SetSeite sets the value of Seite.
func (s *Verkuendung) SetSeite(val string) {
	s.Seite = val
}

// SetAusfertigungsdatum sets the value of Ausfertigungsdatum.
func (s *Verkuendung) SetAusfertigungsdatum(val time.Time) {
	s.Ausfertigungsdatum = val
}

// SetVerkuendungsdatum sets the value of Verkuendungsdatum.
func (s *Verkuendung) SetVerkuendungsdatum(val time.Time) {
	s.Verkuendungsdatum = val
}

// SetRubrikNr sets the value of RubrikNr.
func (s *Verkuendung) SetRubrikNr(val OptString) {
	s.RubrikNr = val
}

// SetEinleitungstext sets the value of Einleitungstext.
func (s *Verkuendung) SetEinleitungstext(val string) {
	s.Einleitungstext = val
}

// SetVerkuendungsblattBezeichnung sets the value of VerkuendungsblattBezeichnung.
func (s *Verkuendung) SetVerkuendungsblattBezeichnung(val OptString) {
	s.VerkuendungsblattBezeichnung = val
}

// SetVerkuendungsblattKuerzel sets the value of VerkuendungsblattKuerzel.
func (s *Verkuendung) SetVerkuendungsblattKuerzel(val OptString) {
	s.VerkuendungsblattKuerzel = val
}

// SetFundstelle sets the value of Fundstelle.
func (s *Verkuendung) SetFundstelle(val string) {
	s.Fundstelle = val
}

// SetPdfURL sets the value of PdfURL.
func (s *Verkuendung) SetPdfURL(val OptString) {
	s.PdfURL = val
}

// SetTitel sets the value of Titel.
func (s *Verkuendung) SetTitel(val OptString) {
	s.Titel = val
}

// Liefert Metadaten zu einem Vorgang.
// Ref: #/components/schemas/Vorgang
type Vorgang struct {
	ID             string     `json:"id"`
	Typ            VorgangTyp `json:"typ"`
	Beratungsstand OptString  `json:"beratungsstand"`
	Vorgangstyp    string     `json:"vorgangstyp"`
	Wahlperiode    int32      `json:"wahlperiode"`
	Initiative     []string   `json:"initiative"`
	// Datierung des letzten zugehörigen Dokuments.
	Datum OptDate `json:"datum"`
	// Letzte Aktualisierung der Entität.
	Aktualisiert time.Time           `json:"aktualisiert"`
	Titel        string              `json:"titel"`
	Abstract     OptString           `json:"abstract"`
	Sachgebiet   []string            `json:"sachgebiet"`
	Deskriptor   []VorgangDeskriptor `json:"deskriptor"`
	// GESTA-Ordnungsnummer.
	Gesta                     OptString `json:"gesta"`
	Zustimmungsbeduerftigkeit []string  `json:"zustimmungsbeduerftigkeit"`
	// KOM-Nr.
	Kom OptString `json:"kom"`
	// Ratsdok-Nr.
	Ratsdok       OptString       `json:"ratsdok"`
	Verkuendung   []Verkuendung   `json:"verkuendung"`
	Inkrafttreten []Inkrafttreten `json:"inkrafttreten"`
	// Archivsignatur.
	Archiv            OptString           `json:"archiv"`
	Mitteilung        OptString           `json:"mitteilung"`
	VorgangVerlinkung []VorgangVerlinkung `json:"vorgang_verlinkung"`
	// SEK-Nr.
	Sek OptString `json:"sek"`
}

// GetID returns the value of ID.
func (s *Vorgang) GetID() string {
	return s.ID
}

// GetTyp returns the value of Typ.
func (s *Vorgang) GetTyp() VorgangTyp {
	return s.Typ
}

// GetBeratungsstand returns the value of Beratungsstand.
func (s *Vorgang) GetBeratungsstand() OptString {
	return s.Beratungsstand
}

// GetVorgangstyp returns the value of Vorgangstyp.
func (s *Vorgang) GetVorgangstyp() string {
	return s.Vorgangstyp
}

// GetWahlperiode returns the value of Wahlperiode.
func (s *Vorgang) GetWahlperiode() int32 {
	return s.Wahlperiode
}

// GetInitiative returns the value of Initiative.
func (s *Vorgang) GetInitiative() []string {
	return s.Initiative
}

// GetDatum returns the value of Datum.
func (s *Vorgang) GetDatum() OptDate {
	return s.Datum
}

// GetAktualisiert returns the value of Aktualisiert.
func (s *Vorgang) GetAktualisiert() time.Time {
	return s.Aktualisiert
}

// GetTitel returns the value of Titel.
func (s *Vorgang) GetTitel() string {
	return s.Titel
}

// GetAbstract returns the value of Abstract.
func (s *Vorgang) GetAbstract() OptString {
	return s.Abstract
}

// GetSachgebiet returns the value of Sachgebiet.
func (s *Vorgang) GetSachgebiet() []string {
	return s.Sachgebiet
}

// GetDeskriptor returns the value of Deskriptor.
func (s *Vorgang) GetDeskriptor() []VorgangDeskriptor {
	return s.Deskriptor
}

// GetGesta returns the value of Gesta.
func (s *Vorgang) GetGesta() OptString {
	return s.Gesta
}

// GetZustimmungsbeduerftigkeit returns the value of Zustimmungsbeduerftigkeit.
func (s *Vorgang) GetZustimmungsbeduerftigkeit() []string {
	return s.Zustimmungsbeduerftigkeit
}

// GetKom returns the value of Kom.
func (s *Vorgang) GetKom() OptString {
	return s.Kom
}

// GetRatsdok returns the value of Ratsdok.
func (s *Vorgang) GetRatsdok() OptString {
	return s.Ratsdok
}

// GetVerkuendung returns the value of Verkuendung.
func (s *Vorgang) GetVerkuendung() []Verkuendung {
	return s.Verkuendung
}

// GetInkrafttreten returns the value of Inkrafttreten.
func (s *Vorgang) GetInkrafttreten() []Inkrafttreten {
	return s.Inkrafttreten
}

// GetArchiv returns the value of Archiv.
func (s *Vorgang) GetArchiv() OptString {
	return s.Archiv
}

// GetMitteilung returns the value of Mitteilung.
func (s *Vorgang) GetMitteilung() OptString {
	return s.Mitteilung
}

// GetVorgangVerlinkung returns the value of VorgangVerlinkung.
func (s *Vorgang) GetVorgangVerlinkung() []VorgangVerlinkung {
	return s.VorgangVerlinkung
}

// GetSek returns the value of Sek.
func (s *Vorgang) GetSek() OptString {
	return s.Sek
}

// SetID sets the value of ID.
func (s *Vorgang) SetID(val string) {
	s.ID = val
}

// SetTyp sets the value of Typ.
func (s *Vorgang) SetTyp(val VorgangTyp) {
	s.Typ = val
}

// SetBeratungsstand sets the value of Beratungsstand.
func (s *Vorgang) SetBeratungsstand(val OptString) {
	s.Beratungsstand = val
}

// SetVorgangstyp sets the value of Vorgangstyp.
func (s *Vorgang) SetVorgangstyp(val string) {
	s.Vorgangstyp = val
}

// SetWahlperiode sets the value of Wahlperiode.
func (s *Vorgang) SetWahlperiode(val int32) {
	s.Wahlperiode = val
}

// SetInitiative sets the value of Initiative.
func (s *Vorgang) SetInitiative(val []string) {
	s.Initiative = val
}

// SetDatum sets the value of Datum.
func (s *Vorgang) SetDatum(val OptDate) {
	s.Datum = val
}

// SetAktualisiert sets the value of Aktualisiert.
func (s *Vorgang) SetAktualisiert(val time.Time) {
	s.Aktualisiert = val
}

// SetTitel sets the value of Titel.
func (s *Vorgang) SetTitel(val string) {
	s.Titel = val
}

// SetAbstract sets the value of Abstract.
func (s *Vorgang) SetAbstract(val OptString) {
	s.Abstract = val
}

// SetSachgebiet sets the value of Sachgebiet.
func (s *Vorgang) SetSachgebiet(val []string) {
	s.Sachgebiet = val
}

// SetDeskriptor sets the value of Deskriptor.
func (s *Vorgang) SetDeskriptor(val []VorgangDeskriptor) {
	s.Deskriptor = val
}

// SetGesta sets the value of Gesta.
func (s *Vorgang) SetGesta(val OptString) {
	s.Gesta = val
}

// SetZustimmungsbeduerftigkeit sets the value of Zustimmungsbeduerftigkeit.
func (s *Vorgang) SetZustimmungsbeduerftigkeit(val []string) {
	s.Zustimmungsbeduerftigkeit = val
}

// SetKom sets the value of Kom.
func (s *Vorgang) SetKom(val OptString) {
	s.Kom = val
}

// SetRatsdok sets the value of Ratsdok.
func (s *Vorgang) SetRatsdok(val OptString) {
	s.Ratsdok = val
}

// SetVerkuendung sets the value of Verkuendung.
func (s *Vorgang) SetVerkuendung(val []Verkuendung) {
	s.Verkuendung = val
}

// SetInkrafttreten sets the value of Inkrafttreten.
func (s *Vorgang) SetInkrafttreten(val []Inkrafttreten) {
	s.Inkrafttreten = val
}

// SetArchiv sets the value of Archiv.
func (s *Vorgang) SetArchiv(val OptString) {
	s.Archiv = val
}

// SetMitteilung sets the value of Mitteilung.
func (s *Vorgang) SetMitteilung(val OptString) {
	s.Mitteilung = val
}

// SetVorgangVerlinkung sets the value of VorgangVerlinkung.
func (s *Vorgang) SetVorgangVerlinkung(val []VorgangVerlinkung) {
	s.VorgangVerlinkung = val
}

// SetSek sets the value of Sek.
func (s *Vorgang) SetSek(val OptString) {
	s.Sek = val
}

func (*Vorgang) getVorgangRes() {}

// Merged schema.
// Ref: #/components/schemas/VorgangDeskriptor
type VorgangDeskriptor struct {
	Name string               `json:"name"`
	Typ  VorgangDeskriptorTyp `json:"typ"`
	// Kennzeichnet Deskriptoren mit zentraler Bedeutung.
	Fundstelle bool `json:"fundstelle"`
}

// GetName returns the value of Name.
func (s *VorgangDeskriptor) GetName() string {
	return s.Name
}

// GetTyp returns the value of Typ.
func (s *VorgangDeskriptor) GetTyp() VorgangDeskriptorTyp {
	return s.Typ
}

// GetFundstelle returns the value of Fundstelle.
func (s *VorgangDeskriptor) GetFundstelle() bool {
	return s.Fundstelle
}

// SetName sets the value of Name.
func (s *VorgangDeskriptor) SetName(val string) {
	s.Name = val
}

// SetTyp sets the value of Typ.
func (s *VorgangDeskriptor) SetTyp(val VorgangDeskriptorTyp) {
	s.Typ = val
}

// SetFundstelle sets the value of Fundstelle.
func (s *VorgangDeskriptor) SetFundstelle(val bool) {
	s.Fundstelle = val
}

type VorgangDeskriptorTyp string

const (
	VorgangDeskriptorTypFreierDeskriptor  VorgangDeskriptorTyp = "Freier Deskriptor"
	VorgangDeskriptorTypGeographBegriffe  VorgangDeskriptorTyp = "Geograph. Begriffe"
	VorgangDeskriptorTypInstitutionen     VorgangDeskriptorTyp = "Institutionen"
	VorgangDeskriptorTypPersonen          VorgangDeskriptorTyp = "Personen"
	VorgangDeskriptorTypRechtsmaterialien VorgangDeskriptorTyp = "Rechtsmaterialien"
	VorgangDeskriptorTypSachbegriffe      VorgangDeskriptorTyp = "Sachbegriffe"
)

// AllValues returns all VorgangDeskriptorTyp values.
func (VorgangDeskriptorTyp) AllValues() []VorgangDeskriptorTyp {
	return []VorgangDeskriptorTyp{
		VorgangDeskriptorTypFreierDeskriptor,
		VorgangDeskriptorTypGeographBegriffe,
		VorgangDeskriptorTypInstitutionen,
		VorgangDeskriptorTypPersonen,
		VorgangDeskriptorTypRechtsmaterialien,
		VorgangDeskriptorTypSachbegriffe,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VorgangDeskriptorTyp) MarshalText() ([]byte, error) {
	switch s {
	case VorgangDeskriptorTypFreierDeskriptor:
		return []byte(s), nil
	case VorgangDeskriptorTypGeographBegriffe:
		return []byte(s), nil
	case VorgangDeskriptorTypInstitutionen:
		return []byte(s), nil
	case VorgangDeskriptorTypPersonen:
		return []byte(s), nil
	case VorgangDeskriptorTypRechtsmaterialien:
		return []byte(s), nil
	case VorgangDeskriptorTypSachbegriffe:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VorgangDeskriptorTyp) UnmarshalText(data []byte) error {
	switch VorgangDeskriptorTyp(data) {
	case VorgangDeskriptorTypFreierDeskriptor:
		*s = VorgangDeskriptorTypFreierDeskriptor
		return nil
	case VorgangDeskriptorTypGeographBegriffe:
		*s = VorgangDeskriptorTypGeographBegriffe
		return nil
	case VorgangDeskriptorTypInstitutionen:
		*s = VorgangDeskriptorTypInstitutionen
		return nil
	case VorgangDeskriptorTypPersonen:
		*s = VorgangDeskriptorTypPersonen
		return nil
	case VorgangDeskriptorTypRechtsmaterialien:
		*s = VorgangDeskriptorTypRechtsmaterialien
		return nil
	case VorgangDeskriptorTypSachbegriffe:
		*s = VorgangDeskriptorTypSachbegriffe
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/VorgangListResponse
type VorgangListResponse struct {
	NumFound  int32     `json:"numFound"`
	Cursor    string    `json:"cursor"`
	Documents []Vorgang `json:"documents"`
}

// GetNumFound returns the value of NumFound.
func (s *VorgangListResponse) GetNumFound() int32 {
	return s.NumFound
}

// GetCursor returns the value of Cursor.
func (s *VorgangListResponse) GetCursor() string {
	return s.Cursor
}

// GetDocuments returns the value of Documents.
func (s *VorgangListResponse) GetDocuments() []Vorgang {
	return s.Documents
}

// SetNumFound sets the value of NumFound.
func (s *VorgangListResponse) SetNumFound(val int32) {
	s.NumFound = val
}

// SetCursor sets the value of Cursor.
func (s *VorgangListResponse) SetCursor(val string) {
	s.Cursor = val
}

// SetDocuments sets the value of Documents.
func (s *VorgangListResponse) SetDocuments(val []Vorgang) {
	s.Documents = val
}

func (*VorgangListResponse) getVorgangListRes() {}

type VorgangTyp string

const (
	VorgangTypVorgang VorgangTyp = "Vorgang"
)

// AllValues returns all VorgangTyp values.
func (VorgangTyp) AllValues() []VorgangTyp {
	return []VorgangTyp{
		VorgangTypVorgang,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VorgangTyp) MarshalText() ([]byte, error) {
	switch s {
	case VorgangTypVorgang:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VorgangTyp) UnmarshalText(data []byte) error {
	switch VorgangTyp(data) {
	case VorgangTypVorgang:
		*s = VorgangTypVorgang
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Verlinkte Verweisung von einem Vorgang auf einen anderen Vorgang, zu dem eine besondere
// inhaltliche Verbindung besteht.
// Ref: #/components/schemas/VorgangVerlinkung
type VorgangVerlinkung struct {
	// ID eines verknüpften Vorgangs.
	ID          string    `json:"id"`
	Verweisung  string    `json:"verweisung"`
	Titel       string    `json:"titel"`
	Wahlperiode int32     `json:"wahlperiode"`
	Gesta       OptString `json:"gesta"`
}

// GetID returns the value of ID.
func (s *VorgangVerlinkung) GetID() string {
	return s.ID
}

// GetVerweisung returns the value of Verweisung.
func (s *VorgangVerlinkung) GetVerweisung() string {
	return s.Verweisung
}

// GetTitel returns the value of Titel.
func (s *VorgangVerlinkung) GetTitel() string {
	return s.Titel
}

// GetWahlperiode returns the value of Wahlperiode.
func (s *VorgangVerlinkung) GetWahlperiode() int32 {
	return s.Wahlperiode
}

// GetGesta returns the value of Gesta.
func (s *VorgangVerlinkung) GetGesta() OptString {
	return s.Gesta
}

// SetID sets the value of ID.
func (s *VorgangVerlinkung) SetID(val string) {
	s.ID = val
}

// SetVerweisung sets the value of Verweisung.
func (s *VorgangVerlinkung) SetVerweisung(val string) {
	s.Verweisung = val
}

// SetTitel sets the value of Titel.
func (s *VorgangVerlinkung) SetTitel(val string) {
	s.Titel = val
}

// SetWahlperiode sets the value of Wahlperiode.
func (s *VorgangVerlinkung) SetWahlperiode(val int32) {
	s.Wahlperiode = val
}

// SetGesta sets the value of Gesta.
func (s *VorgangVerlinkung) SetGesta(val OptString) {
	s.Gesta = val
}

// Liefert ID, Titel und Vorgangstyp eines Vorgangs, der mit der Drucksache oder dem Plenarprotokoll
// verbunden ist.
// Ref: #/components/schemas/Vorgangsbezug
type Vorgangsbezug struct {
	// ID eines verknüpften Vorgangs.
	ID          string `json:"id"`
	Titel       string `json:"titel"`
	Vorgangstyp string `json:"vorgangstyp"`
}

// GetID returns the value of ID.
func (s *Vorgangsbezug) GetID() string {
	return s.ID
}

// GetTitel returns the value of Titel.
func (s *Vorgangsbezug) GetTitel() string {
	return s.Titel
}

// GetVorgangstyp returns the value of Vorgangstyp.
func (s *Vorgangsbezug) GetVorgangstyp() string {
	return s.Vorgangstyp
}

// SetID sets the value of ID.
func (s *Vorgangsbezug) SetID(val string) {
	s.ID = val
}

// SetTitel sets the value of Titel.
func (s *Vorgangsbezug) SetTitel(val string) {
	s.Titel = val
}

// SetVorgangstyp sets the value of Vorgangstyp.
func (s *Vorgangsbezug) SetVorgangstyp(val string) {
	s.Vorgangstyp = val
}

// Liefert Metadaten zu einer Vorgangsposition (Vorgangsschritt).
// Ref: #/components/schemas/Vorgangsposition
type Vorgangsposition struct {
	ID               string    `json:"id"`
	Vorgangsposition string    `json:"vorgangsposition"`
	Zuordnung        Zuordnung `json:"zuordnung"`
	// Alle Vorgangsschritte, die von besonderer Bedeutung für den Fortgang der Beratung sind, werden
	// durch das Attribut `gang: true` gekennzeichnet.
	// Ist ein solcher Vorgangsschritt mit einer Drucksache verknüpft, werden im Frontend unter der
	// Benennung "Wichtige Drucksachen" Herausgeber, Nummer und Typ sowie das Datum der entsprechenden
	// Drucksachen ausgegeben (z.B. BT-Drs 18/13014 (Beschlussempfehlung), 28.06.2017).
	// Ist er mit einem Plenarprotokoll verknüpft, werden im Frontend unter der Benennung "Plenum" der
	// Klartext der Vorgangsposition, Datum, Herausgeber und Nummer des Plenarprotokolls mit
	// Anfangsseite/Quadrant und Endseite/Quadrant dargestellt (z.B. 2. Beratung: 29.06.2017, BT-PlPr
	// 18/243, S. 24964C - 24973C).
	Gang bool `json:"gang"`
	// Erstreckt sich eine Beratung über mehrere Plenarprotokolle, so müssen entsprechend viele
	// Vorgangsschritte mit je gleicher Vorgangsposition im Vorgangsablauf angelegt werden. Der zweite
	// und jeder weitere dieser Schritte wird dann als "Fortsetzung" gekennzeichnet (Attribut
	// `fortsetzung: true`).
	// Für die Beratung des Gesetzentwurfs für die Feststellung des Haushaltsplanes
	// (Haushaltsberatungen) gelten abweichende Regelungen.
	Fortsetzung bool `json:"fortsetzung"`
	// Eine Auswertungseinheit eines Plenarprotokolls kann nur an genau einen Vorgangsschritt angebunden
	// werden.
	// Müssen aber mehrere Auswertungseinheiten für einen Vorgangsschritt gebildet werden (weil die
	// Ergänzung einer Rede erst in einem späteren Protokoll erscheint oder weil sich z.B. bei einer
	// Verbundenen Beratung (§ 24 GO-BT) nicht alle Schriftlichen Erklärungen nach § 31 GO-BT auf
	// sämtliche Vorlagen beziehen),
	// dann müssen im Vorgangsablauf mehrere Vorgangsschritte mit der gleichen Vorgangsposition angelegt
	// werden. Der zweite und jeder weitere dieser Schritte wird dann als "Nachtrag" gekennzeichnet
	// (Attribut `nachtrag: true`).
	Nachtrag bool `json:"nachtrag"`
	// Vorgangstyp des zugehörigen Vorgangs.
	Vorgangstyp string              `json:"vorgangstyp"`
	Typ         VorgangspositionTyp `json:"typ"`
	// Titel des zugehörigen Vorgangs.
	Titel       string                      `json:"titel"`
	Dokumentart VorgangspositionDokumentart `json:"dokumentart"`
	// ID des zugehörigen Vorgangs.
	VorgangID string `json:"vorgang_id"`
	// Datum des zugehörigen Dokuments.
	Datum time.Time `json:"datum"`
	// Letzte Aktualisierung der Entität oder des zugehörigen Dokuments.
	Aktualisiert time.Time      `json:"aktualisiert"`
	Fundstelle   Fundstelle     `json:"fundstelle"`
	Urheber      []Urheber      `json:"urheber"`
	Ueberweisung []Ueberweisung `json:"ueberweisung"`
	// Zusammenfassung der ersten 4 zur Anzeige vorgesehenen Aktivitäten.
	AktivitaetAnzeige []AktivitaetAnzeige `json:"aktivitaet_anzeige"`
	// Gesamtzahl der zugehörigen Aktivitäten.
	AktivitaetAnzahl int32              `json:"aktivitaet_anzahl"`
	Ressort          []Ressort          `json:"ressort"`
	Beschlussfassung []Beschlussfassung `json:"beschlussfassung"`
	// Ratsdok-Nr.
	Ratsdok OptString `json:"ratsdok"`
	// KOM-Nr.
	Kom OptString `json:"kom"`
	// SEK-Nr.
	Sek OptString `json:"sek"`
	// Es ist eine häufig geübte Praxis, mehrere thematisch verwandte Vorlagen (z.B. konkurrierende
	// Anträge der verschiedenen Fraktionen zum Thema Diesel-Fahrverbote) in einer Debatte gemeinsam zu
	// beraten ("Zusammenberatung").
	// `mitberaten` liefert, von einem Vorgang ausgehend, alle anderen Vorgänge, die Gegenstand der
	// Zusammenberatung sind.
	Mitberaten []Vorgangspositionbezug `json:"mitberaten"`
	Abstract   OptString               `json:"abstract"`
}

// GetID returns the value of ID.
func (s *Vorgangsposition) GetID() string {
	return s.ID
}

// GetVorgangsposition returns the value of Vorgangsposition.
func (s *Vorgangsposition) GetVorgangsposition() string {
	return s.Vorgangsposition
}

// GetZuordnung returns the value of Zuordnung.
func (s *Vorgangsposition) GetZuordnung() Zuordnung {
	return s.Zuordnung
}

// GetGang returns the value of Gang.
func (s *Vorgangsposition) GetGang() bool {
	return s.Gang
}

// GetFortsetzung returns the value of Fortsetzung.
func (s *Vorgangsposition) GetFortsetzung() bool {
	return s.Fortsetzung
}

// GetNachtrag returns the value of Nachtrag.
func (s *Vorgangsposition) GetNachtrag() bool {
	return s.Nachtrag
}

// GetVorgangstyp returns the value of Vorgangstyp.
func (s *Vorgangsposition) GetVorgangstyp() string {
	return s.Vorgangstyp
}

// GetTyp returns the value of Typ.
func (s *Vorgangsposition) GetTyp() VorgangspositionTyp {
	return s.Typ
}

// GetTitel returns the value of Titel.
func (s *Vorgangsposition) GetTitel() string {
	return s.Titel
}

// GetDokumentart returns the value of Dokumentart.
func (s *Vorgangsposition) GetDokumentart() VorgangspositionDokumentart {
	return s.Dokumentart
}

// GetVorgangID returns the value of VorgangID.
func (s *Vorgangsposition) GetVorgangID() string {
	return s.VorgangID
}

// GetDatum returns the value of Datum.
func (s *Vorgangsposition) GetDatum() time.Time {
	return s.Datum
}

// GetAktualisiert returns the value of Aktualisiert.
func (s *Vorgangsposition) GetAktualisiert() time.Time {
	return s.Aktualisiert
}

// GetFundstelle returns the value of Fundstelle.
func (s *Vorgangsposition) GetFundstelle() Fundstelle {
	return s.Fundstelle
}

// GetUrheber returns the value of Urheber.
func (s *Vorgangsposition) GetUrheber() []Urheber {
	return s.Urheber
}

// GetUeberweisung returns the value of Ueberweisung.
func (s *Vorgangsposition) GetUeberweisung() []Ueberweisung {
	return s.Ueberweisung
}

// GetAktivitaetAnzeige returns the value of AktivitaetAnzeige.
func (s *Vorgangsposition) GetAktivitaetAnzeige() []AktivitaetAnzeige {
	return s.AktivitaetAnzeige
}

// GetAktivitaetAnzahl returns the value of AktivitaetAnzahl.
func (s *Vorgangsposition) GetAktivitaetAnzahl() int32 {
	return s.AktivitaetAnzahl
}

// GetRessort returns the value of Ressort.
func (s *Vorgangsposition) GetRessort() []Ressort {
	return s.Ressort
}

// GetBeschlussfassung returns the value of Beschlussfassung.
func (s *Vorgangsposition) GetBeschlussfassung() []Beschlussfassung {
	return s.Beschlussfassung
}

// GetRatsdok returns the value of Ratsdok.
func (s *Vorgangsposition) GetRatsdok() OptString {
	return s.Ratsdok
}

// GetKom returns the value of Kom.
func (s *Vorgangsposition) GetKom() OptString {
	return s.Kom
}

// GetSek returns the value of Sek.
func (s *Vorgangsposition) GetSek() OptString {
	return s.Sek
}

// GetMitberaten returns the value of Mitberaten.
func (s *Vorgangsposition) GetMitberaten() []Vorgangspositionbezug {
	return s.Mitberaten
}

// GetAbstract returns the value of Abstract.
func (s *Vorgangsposition) GetAbstract() OptString {
	return s.Abstract
}

// SetID sets the value of ID.
func (s *Vorgangsposition) SetID(val string) {
	s.ID = val
}

// SetVorgangsposition sets the value of Vorgangsposition.
func (s *Vorgangsposition) SetVorgangsposition(val string) {
	s.Vorgangsposition = val
}

// SetZuordnung sets the value of Zuordnung.
func (s *Vorgangsposition) SetZuordnung(val Zuordnung) {
	s.Zuordnung = val
}

// SetGang sets the value of Gang.
func (s *Vorgangsposition) SetGang(val bool) {
	s.Gang = val
}

// SetFortsetzung sets the value of Fortsetzung.
func (s *Vorgangsposition) SetFortsetzung(val bool) {
	s.Fortsetzung = val
}

// SetNachtrag sets the value of Nachtrag.
func (s *Vorgangsposition) SetNachtrag(val bool) {
	s.Nachtrag = val
}

// SetVorgangstyp sets the value of Vorgangstyp.
func (s *Vorgangsposition) SetVorgangstyp(val string) {
	s.Vorgangstyp = val
}

// SetTyp sets the value of Typ.
func (s *Vorgangsposition) SetTyp(val VorgangspositionTyp) {
	s.Typ = val
}

// SetTitel sets the value of Titel.
func (s *Vorgangsposition) SetTitel(val string) {
	s.Titel = val
}

// SetDokumentart sets the value of Dokumentart.
func (s *Vorgangsposition) SetDokumentart(val VorgangspositionDokumentart) {
	s.Dokumentart = val
}

// SetVorgangID sets the value of VorgangID.
func (s *Vorgangsposition) SetVorgangID(val string) {
	s.VorgangID = val
}

// SetDatum sets the value of Datum.
func (s *Vorgangsposition) SetDatum(val time.Time) {
	s.Datum = val
}

// SetAktualisiert sets the value of Aktualisiert.
func (s *Vorgangsposition) SetAktualisiert(val time.Time) {
	s.Aktualisiert = val
}

// SetFundstelle sets the value of Fundstelle.
func (s *Vorgangsposition) SetFundstelle(val Fundstelle) {
	s.Fundstelle = val
}

// SetUrheber sets the value of Urheber.
func (s *Vorgangsposition) SetUrheber(val []Urheber) {
	s.Urheber = val
}

// SetUeberweisung sets the value of Ueberweisung.
func (s *Vorgangsposition) SetUeberweisung(val []Ueberweisung) {
	s.Ueberweisung = val
}

// SetAktivitaetAnzeige sets the value of AktivitaetAnzeige.
func (s *Vorgangsposition) SetAktivitaetAnzeige(val []AktivitaetAnzeige) {
	s.AktivitaetAnzeige = val
}

// SetAktivitaetAnzahl sets the value of AktivitaetAnzahl.
func (s *Vorgangsposition) SetAktivitaetAnzahl(val int32) {
	s.AktivitaetAnzahl = val
}

// SetRessort sets the value of Ressort.
func (s *Vorgangsposition) SetRessort(val []Ressort) {
	s.Ressort = val
}

// SetBeschlussfassung sets the value of Beschlussfassung.
func (s *Vorgangsposition) SetBeschlussfassung(val []Beschlussfassung) {
	s.Beschlussfassung = val
}

// SetRatsdok sets the value of Ratsdok.
func (s *Vorgangsposition) SetRatsdok(val OptString) {
	s.Ratsdok = val
}

// SetKom sets the value of Kom.
func (s *Vorgangsposition) SetKom(val OptString) {
	s.Kom = val
}

// SetSek sets the value of Sek.
func (s *Vorgangsposition) SetSek(val OptString) {
	s.Sek = val
}

// SetMitberaten sets the value of Mitberaten.
func (s *Vorgangsposition) SetMitberaten(val []Vorgangspositionbezug) {
	s.Mitberaten = val
}

// SetAbstract sets the value of Abstract.
func (s *Vorgangsposition) SetAbstract(val OptString) {
	s.Abstract = val
}

func (*Vorgangsposition) getVorgangspositionRes() {}

type VorgangspositionDokumentart string

const (
	VorgangspositionDokumentartDrucksache      VorgangspositionDokumentart = "Drucksache"
	VorgangspositionDokumentartPlenarprotokoll VorgangspositionDokumentart = "Plenarprotokoll"
)

// AllValues returns all VorgangspositionDokumentart values.
func (VorgangspositionDokumentart) AllValues() []VorgangspositionDokumentart {
	return []VorgangspositionDokumentart{
		VorgangspositionDokumentartDrucksache,
		VorgangspositionDokumentartPlenarprotokoll,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VorgangspositionDokumentart) MarshalText() ([]byte, error) {
	switch s {
	case VorgangspositionDokumentartDrucksache:
		return []byte(s), nil
	case VorgangspositionDokumentartPlenarprotokoll:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VorgangspositionDokumentart) UnmarshalText(data []byte) error {
	switch VorgangspositionDokumentart(data) {
	case VorgangspositionDokumentartDrucksache:
		*s = VorgangspositionDokumentartDrucksache
		return nil
	case VorgangspositionDokumentartPlenarprotokoll:
		*s = VorgangspositionDokumentartPlenarprotokoll
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/VorgangspositionListResponse
type VorgangspositionListResponse struct {
	NumFound  int32              `json:"numFound"`
	Cursor    string             `json:"cursor"`
	Documents []Vorgangsposition `json:"documents"`
}

// GetNumFound returns the value of NumFound.
func (s *VorgangspositionListResponse) GetNumFound() int32 {
	return s.NumFound
}

// GetCursor returns the value of Cursor.
func (s *VorgangspositionListResponse) GetCursor() string {
	return s.Cursor
}

// GetDocuments returns the value of Documents.
func (s *VorgangspositionListResponse) GetDocuments() []Vorgangsposition {
	return s.Documents
}

// SetNumFound sets the value of NumFound.
func (s *VorgangspositionListResponse) SetNumFound(val int32) {
	s.NumFound = val
}

// SetCursor sets the value of Cursor.
func (s *VorgangspositionListResponse) SetCursor(val string) {
	s.Cursor = val
}

// SetDocuments sets the value of Documents.
func (s *VorgangspositionListResponse) SetDocuments(val []Vorgangsposition) {
	s.Documents = val
}

func (*VorgangspositionListResponse) getVorgangspositionListRes() {}

type VorgangspositionTyp string

const (
	VorgangspositionTypVorgangsposition VorgangspositionTyp = "Vorgangsposition"
)

// AllValues returns all VorgangspositionTyp values.
func (VorgangspositionTyp) AllValues() []VorgangspositionTyp {
	return []VorgangspositionTyp{
		VorgangspositionTypVorgangsposition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VorgangspositionTyp) MarshalText() ([]byte, error) {
	switch s {
	case VorgangspositionTypVorgangsposition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VorgangspositionTyp) UnmarshalText(data []byte) error {
	switch VorgangspositionTyp(data) {
	case VorgangspositionTypVorgangsposition:
		*s = VorgangspositionTypVorgangsposition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/Vorgangspositionbezug
type Vorgangspositionbezug struct {
	// ID eines verknüpften Vorgangs.
	ID               string `json:"id"`
	Titel            string `json:"titel"`
	Vorgangstyp      string `json:"vorgangstyp"`
	Vorgangsposition string `json:"vorgangsposition"`
}

// GetID returns the value of ID.
func (s *Vorgangspositionbezug) GetID() string {
	return s.ID
}

// GetTitel returns the value of Titel.
func (s *Vorgangspositionbezug) GetTitel() string {
	return s.Titel
}

// GetVorgangstyp returns the value of Vorgangstyp.
func (s *Vorgangspositionbezug) GetVorgangstyp() string {
	return s.Vorgangstyp
}

// GetVorgangsposition returns the value of Vorgangsposition.
func (s *Vorgangspositionbezug) GetVorgangsposition() string {
	return s.Vorgangsposition
}

// SetID sets the value of ID.
func (s *Vorgangspositionbezug) SetID(val string) {
	s.ID = val
}

// SetTitel sets the value of Titel.
func (s *Vorgangspositionbezug) SetTitel(val string) {
	s.Titel = val
}

// SetVorgangstyp sets the value of Vorgangstyp.
func (s *Vorgangspositionbezug) SetVorgangstyp(val string) {
	s.Vorgangstyp = val
}

// SetVorgangsposition sets the value of Vorgangsposition.
func (s *Vorgangspositionbezug) SetVorgangsposition(val string) {
	s.Vorgangsposition = val
}

// Jeder Vorgangsschritt ist entweder dem Bundestag (BT), dem Bundesrat (BR), der Bundesversammlung
// (BV) oder der Europakammer (EK) zugeordnet. Über die Zuordnung lassen sich bspw.
// Rechtsverordnungen herausfiltern, an denen der Bundestag beteiligt / nicht beteiligt war.
// Ref: #/components/schemas/Zuordnung
type Zuordnung string

const (
	ZuordnungBT Zuordnung = "BT"
	ZuordnungBR Zuordnung = "BR"
	ZuordnungBV Zuordnung = "BV"
	ZuordnungEK Zuordnung = "EK"
)

// AllValues returns all Zuordnung values.
func (Zuordnung) AllValues() []Zuordnung {
	return []Zuordnung{
		ZuordnungBT,
		ZuordnungBR,
		ZuordnungBV,
		ZuordnungEK,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Zuordnung) MarshalText() ([]byte, error) {
	switch s {
	case ZuordnungBT:
		return []byte(s), nil
	case ZuordnungBR:
		return []byte(s), nil
	case ZuordnungBV:
		return []byte(s), nil
	case ZuordnungEK:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Zuordnung) UnmarshalText(data []byte) error {
	switch Zuordnung(data) {
	case ZuordnungBT:
		*s = ZuordnungBT
		return nil
	case ZuordnungBR:
		*s = ZuordnungBR
		return nil
	case ZuordnungBV:
		*s = ZuordnungBV
		return nil
	case ZuordnungEK:
		*s = ZuordnungEK
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
